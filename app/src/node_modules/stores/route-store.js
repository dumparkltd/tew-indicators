var Fluxxor = require("fluxxor")
var actions = require("actions")
var omit    = require('lodash.omit')
var isArray = require('isarray')
var clone   = require('lodash.clone')

var log     = require('debug')('src:node_modules:stores:route-store')

var RouteStore = Fluxxor.createStore({
  initialize: function (options) {
    this.router         = options.router
    this.currentPath    = options.path
    this.currentParams  = options.params
    this.currentQuery   = options.query || {}

    this.bindActions(
      actions.constants.ROUTE.TRANSITION, this.handleRouteTransition,
      actions.constants.ROUTE.QUERY.UPDATE, this.handleQueryUpdate
    )
  },
  //NOTE more specifc methods needed
  handleRouteTransition: function (payload) {
    this.currentPath    = payload.path || this.currentPath || '/'
    this.currentParams  = payload.params || this.currentParams
    this.currentQuery   = omit(payload.query, function (val) { return val === '' }) || this.currentQuery

    log('currentQuery', this.currentQuery)

    this.router.transitionTo(this.currentPath, this.currentParams, this.currentQuery)
  },

  handleQueryUpdate: function (payload) {
    var query = clone(this.currentQuery)
    var updateField = payload.field
    //concatenate values into a string with ',' separator
    var updateValueString = payload.values.reduce(function (memo, val, i) {
      if (val !== '') {
        memo += val
        if (i > 1) memo += ','
      }
      return memo
        }, '')
    log('updateValueString', updateValueString)

    if (updateValueString === '') {
      delete query[updateField]
    }
    else {
      query[updateField] = updateValueString
    }

    this.currentQuery = query
    this.router.transitionTo(this.currentPath, this.currentParams, this.currentQuery)
  },

  getCurrentPath: function () {
    return this.currentPath
  },

  getCurrentParams: function () {
    return this.currentParams
  },

  getCurrentQuery: function () {
    return this.currentQuery
  }
});

module.exports = RouteStore;
