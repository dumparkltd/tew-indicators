var Fluxxor = require("fluxxor")
var actions = require("actions")

var _       = require('lodash')
var isArray = require('isarray')
var url     = require('url')

var log     = require('debug')('src:node_modules:stores:route-store')

var RouteStore = Fluxxor.createStore({
  initialize: function (options) {

    this.router           = options.router

    this.bindActions(
      actions.constants.ROUTE.TRANSITION, this.handleRouteTransition,
      actions.constants.ROUTE.QUERY.TOGGLE, this.handleQueryToggle,
     actions.constants.ROUTE.QUERY.FIELD_REPLACE, this.handleFieldReplace
    )
  },
  getCurrentRoute : function() {
    return this.router.getRouteAtDepth(1).name;
  },
  getCurrentParams: function () {
    return this.router.getCurrentParams()
  },
  getCurrentQuery: function () {
    return this.router.getCurrentQuery()
  },
  // transition to new route
  handleRouteTransition: function (payload) {
    log('handleRouteTransition', payload)

    var payloadQuery = _.omit(payload.query, function (val) { return val === '' });

    // if route specified transition as specified by payload - disregard current paramas or query
    if (payload.route) {
      this.router.transitionTo(payload.route, payload.params || {}, payloadQuery);
    } else {
      // if params but not route specified get current route and transition to params as specified by payload
      // disregard current query
      if (payload.params) {
        this.router.transitionTo(this.getCurrentRoute(), payload.params || {}, payloadQuery);
      } else {
        if (payloadQuery) {
          this.router.transitionTo(this.getCurrentRoute(), this.getCurrentParams(), payloadQuery )
        }
      }
    }

  },

  // payload { field: 'string', value: 'string' }
 handleQueryToggle: function (payload) {
   var query = _.clone(this.router.getCurrentQuery())

   if (query[payload.field]) {
     if (isArray(query[payload.field])) {
       if (_.contains(query[payload.field])) {
         query[payload.field] = _.remove(query[payload.field], payload.value)
       }
       else {
         query[payload.field] = query[payload.field].push(payload.vale)
       }
     }
     else if (query[payload.field] === payload.value) {
       delete query[payload.field]
     }
     else {
       //make an array and add new value to it
       query[payload.field] = [query[payload.field], payload.value]
     }
   }
   else {
     query[payload.field] = payload.value
   }

   log(query)
   this.router.transitionTo(this.getCurrentRoute(), this.getCurrentParams(), query)
 },

 handleFieldReplace: function (payload) {
   var query = _.clone(this.router.getCurrentQuery())
   if (query[payload.field] === payload.value) {
     delete query[payload.field]
   }
   else {
     query[payload.field] = payload.value
   }
   
   log('query', query)

   this.router.transitionTo(this.getCurrentRoute(), this.getCurrentParams(), query)
 },


});

module.exports = RouteStore;
