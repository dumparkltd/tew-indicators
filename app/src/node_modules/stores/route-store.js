var Fluxxor = require("fluxxor")
var actions = require("actions")

var _       = require('lodash')
var isArray = require('isarray')
var url     = require('url')

var log     = require('debug')('src:node_modules:stores:route-store')

// TODO dynamic dimensions
var QUERY_FIELDS_WHITELIST = {
  dataset: true,
  dim1: true,
  dim2: true,
  dim3: true
}

var RouteStore = Fluxxor.createStore({
  initialize: function (options) {

    this.router           = options.router

    this.bindActions(
      actions.constants.ROUTE.TRANSITION, this.handleRouteTransition,
      actions.constants.ROUTE.QUERY.TOGGLE, this.handleQueryToggle,
      actions.constants.ROUTE.QUERY.FIELD_REPLACE, this.handleFieldReplace,
      actions.constants.ROUTE.QUERY.DIMENSION_UPDATE, this.handleDimensionUpdate
    )
  },
  getCurrentRoute : function() {
    return this.router.getRouteAtDepth(1).name;
  },
  getCurrentParams: function () {
    return this.router.getCurrentParams()
  },
  getCurrentQuery: function () {
    return this.router.getCurrentQuery()
  },
  // transition to new route
  handleRouteTransition: function (payload) {
    log('handleRouteTransition', payload)

    var payloadQuery = _.omit(payload.query, function (val) { return val === '' });

    // if route specified transition as specified by payload - disregard current paramas or query
    if (payload.route) {
      this.router.transitionTo(payload.route, payload.params || {}, payloadQuery);
    } else {
      // if params but not route specified get current route and transition to params as specified by payload
      // disregard current query
      if (payload.params) {
        this.router.transitionTo(this.getCurrentRoute(), payload.params || {}, payloadQuery);
      } else {
        if (payloadQuery) {
          this.router.transitionTo(this.getCurrentRoute(), this.getCurrentParams(), payloadQuery )
        }
      }
    }

  },

  // payload { field: 'string', value: 'string' }
 handleQueryToggle: function (payload) {
   var query = _.clone(this.router.getCurrentQuery())
   log('handleQueryToggle', payload, query)

   if (query[payload.field]) {
     if (isArray(query[payload.field])) {
       log('its an array', query[payload.field])
       if (_.contains(query[payload.field], payload.value)) {
         log('it contains the selected value -> remove it ')
         if (query[payload.field].length === 2) {
           log('replace with remianing value')
           query[payload.field] = _.find(query[payload.field], function (val) { return val !== payload.value })
         }
         else {
           log('remove and leave remaining values')
           query[payload.field] = _.remove(query[payload.field], function (val) { return val !== payload.value })
         }

       }
       else {
         log('it does not contain the selected value -> add it ', payload.value, query[payload.field].push(payload.value))
         query[payload.field].push(payload.value)
       }
     }
     else if (query[payload.field] === payload.value) {
       delete query[payload.field]
     }
     else {
       //make an array and add new value to it
       query[payload.field] = [query[payload.field], payload.value]
     }
   }
   else {
     query[payload.field] = payload.value
   }

   log(query)
   this.newQueryTransition(query)
 },

  handleDimensionUpdate: function (payload) {
    log('handleDimensionUpdate', payload)

    var query = _.clone(this.router.getCurrentQuery())
    // remove all higher dimensions
    var unsetDims = []
    _.each(query,function(val,key){
      // if dimension argument (of form 'dimX' with X is numeric)
      // and if higher dimension
      var dim = key.split('dim')[1]
      if (!isNaN(parseFloat(dim))
        && isFinite(dim)
        && dim > payload.field.split('dim')[1]){
          unsetDims.push(key)
      }

    })
    _.each(unsetDims,function(dim){
      delete query[dim]
    })
    this.handleFieldReplace(payload,query)

 },

 handleFieldReplace: function (payload, query) {
   log('handleFieldReplace', payload)
   // warning last argument is action string
   var query = typeof query === 'object' ? query : _.clone(this.router.getCurrentQuery())
   if (query[payload.field] === payload.value || payload.value === null) {
     delete query[payload.field]
   }
   else {
     query[payload.field] = payload.value
   }

   log('query', query)
   this.newQueryTransition(query)
 },


 newQueryTransition: function (query) {
   this.router.transitionTo(this.getCurrentRoute(), this.getCurrentParams(), query)
 }


});

module.exports = RouteStore;
