var Fluxxor = require("fluxxor")
var actions = require("actions")
var omit    = require('lodash.omit')
var isArray = require('isarray')
var clone   = require('lodash.clone')
var url     = require('url')

var log     = require('debug')('src:node_modules:stores:route-store')

var RouteStore = Fluxxor.createStore({
  initialize: function (options) {

    this.router           = options.router

    this.bindActions(
      actions.constants.ROUTE.TRANSITION, this.handleRouteTransition
//      actions.constants.ROUTE.QUERY.UPDATE, this.handleQueryUpdate,
//      actions.constants.ROUTE.QUERY.REPLACE, this.handleQueryReplace
    )
  },
  getCurrentRoute : function() {
    return this.router.getRouteAtDepth(1).name;
  },
  getCurrentParams: function () {
    return this.router.getCurrentParams()
  },
  getCurrentQuery: function () {
    return this.router.getCurrentQuery()
  },
  // transition to new route
  handleRouteTransition: function (payload) {

    var payloadQuery = omit(payload.query, function (val) { return val === '' });

    // if route specified transition as specified by payload - disregard current paramas or query
    if (payload.route) {
      this.router.transitionTo(payload.route, payload.params || {}, payloadQuery);
    } else {
      // if params but not route specified get current route and transition to params as specified by payload
      // disregard current query
      if (payload.params) {
        this.router.transitionTo(this.getCurrentRoute(), payload.params || {}, payloadQuery);
      } else {


        if (payloadQuery) {
          this.router.transitionTo(this.getCurrentRoute(), this.getCurrentParams(), payloadQuery )
        }
      }
    }

  },

//  handleIndicatorTransition: function (payload) {
//    this.currentParams = payload.params
//    var pathname = this.router.makePath('indicator', payload.params).substring(1)
//    log('pathname', pathname)
//    this.router.transitionTo(pathname)
//  },
//
//  handleQueryUpdate: function (payload) {
//    var query = clone(this.currentQuery)
//    var updateField = payload.field
//    //concatenate values into a string with ',' separator
//    var updateValueString = payload.values.reduce(function (memo, val, i) {
//      if (val !== '') {
//        memo += val
//        if (i > 1) memo += ','
//      }
//      return memo
//        }, '')
//    log('updateValueString', updateValueString)
//
//    if (updateValueString === '') {
//      delete query[updateField]
//    }
//    else {
//      query[updateField] = updateValueString
//    }
//
//    this.currentQuery = query
//    this.emit('change')
//    log('currentQuery', this.currentQuery)
//    this.router.transitionTo(this.currentRoute, this.currentParams, this.currentQuery)
//  },
//
//  handleQueryReplace: function (payload) {
//    this.currentQuery = payload.query
//    log('currentQuery', this.currentQuery)
//    // trigger re-render on main:index listening through StoreWatchMixin('route')
//    this.emit('change')
//  },


});

module.exports = RouteStore;
