var Fluxxor = require("fluxxor")
var actions = require("actions")
var omit    = require('lodash.omit')
var isArray = require('isarray')
var clone   = require('lodash.clone')
var url     = require('url')

var log     = require('debug')('src:node_modules:stores:route-store')

var RouteStore = Fluxxor.createStore({
  initialize: function (options) {
//    var urlObj = url.parse(options.pathname) //
//    //NOTE using node:url naming conventions
//    //path == /resource/:id?querystring
//    //pathname == /resource/:id
    this.router           = options.router

    this.bindActions(
      actions.constants.ROUTE.TRANSITION, this.handleRouteTransition,
      actions.constants.ROUTE.QUERY.UPDATE, this.handleQueryUpdate,
      actions.constants.ROUTE.QUERY.REPLACE, this.handleQueryReplace
    )
  },
  initState : function (){    
    this.currentRoute     = this.router.getCurrentPathname() // ie 'resource' curently incorrect
    this.currentParams    = this.router.getCurrentParams() //{issueRoute: issueRoute, indicatorRoute: indicatorRoute}
    this.currentQuery     = this.router.getCurrentQuery()    
  },
  //NOTE eprecated more specifc methods needed
  handleRouteTransition: function (payload) {
    this.currentRoute    = payload.route || this.currentRoute || '/'
    this.currentParams  = payload.params || this.currentParams
    this.currentQuery   = omit(payload.query, function (val) { return val === '' }) || this.currentQuery
    log('currentQuery', this.currentQuery)

    this.router.transitionTo(this.currentRoute, this.currentParams, this.currentQuery)
  },

  handleIndicatorTransition: function (payload) {
    this.currentParams = payload.params //{issueRoute: issueRoute, indicatorRoute: indicatorRoute}
    var pathname = this.router.makePath('indicator', payload.params).substring(1)
    log('pathname', pathname)
    this.router.transitionTo(pathname)
  },

  handleQueryUpdate: function (payload) {
    var query = clone(this.currentQuery)
    var updateField = payload.field
    //concatenate values into a string with ',' separator
    var updateValueString = payload.values.reduce(function (memo, val, i) {
      if (val !== '') {
        memo += val
        if (i > 1) memo += ','
      }
      return memo
        }, '')
    log('updateValueString', updateValueString)

    if (updateValueString === '') {
      delete query[updateField]
    }
    else {
      query[updateField] = updateValueString
    }

    this.currentQuery = query
    this.emit('change')
    log('currentQuery', this.currentQuery)
    this.router.transitionTo(this.currentRoute, this.currentParams, this.currentQuery)
  },

  handleQueryReplace: function (payload) {
    this.currentQuery = payload.query
    log('currentQuery', this.currentQuery)
    // trigger re-render on main:index listening through StoreWatchMixin('route')
    this.emit('change')
  },

  getCurrentRoute: function () {
    return this.currentRoute
  },

  getCurrentParams: function () {
    return this.currentParams
  },

  getCurrentQuery: function () {
    return this.currentQuery
  },
});

module.exports = RouteStore;
