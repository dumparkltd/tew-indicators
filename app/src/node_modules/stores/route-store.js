var Fluxxor = require("fluxxor")
var actions = require("actions")

var _       = require('lodash')
var isArray = require('isarray')
var url     = require('url')

var log     = require('debug')('src:node_modules:stores:route-store')
var QUERY_FIELDS_WHITELIST = {
  dataset: true,
  d1: true,
  d2: true,
  d3: true
}


var RouteStore = Fluxxor.createStore({
  initialize: function (options) {

    this.router           = options.router

    this.bindActions(
      actions.constants.ROUTE.TRANSITION, this.handleRouteTransition,
      actions.constants.ROUTE.QUERY.TOGGLE, this.handleQueryToggle,
      actions.constants.ROUTE.QUERY.FIELD_REPLACE, this.handleFieldReplace,
      actions.constants.ROUTE.QUERY.DIMENSION_UPDATE, this.handleDimensionUpdate
    )
  },
  getCurrentRoute : function() {
    return this.router.getRouteAtDepth(1).name;
  },
  getCurrentParams: function () {
    return this.router.getCurrentParams()
  },
  getCurrentQuery: function () {
    return this.router.getCurrentQuery()
  },
  // transition to new route
  handleRouteTransition: function (payload) {
    log('handleRouteTransition', payload)

    var payloadQuery = _.omit(payload.query, function (val) { return val === '' });

    // if route specified transition as specified by payload - disregard current paramas or query
    if (payload.route) {
      this.router.transitionTo(payload.route, payload.params || {}, payloadQuery);
    } else {
      // if params but not route specified get current route and transition to params as specified by payload
      // disregard current query
      if (payload.params) {
        this.router.transitionTo(this.getCurrentRoute(), payload.params || {}, payloadQuery);
      } else {
        if (payloadQuery) {
          this.router.transitionTo(this.getCurrentRoute(), this.getCurrentParams(), payloadQuery )
        }
      }
    }

  },

  // payload { field: 'string', value: 'string' }
 handleQueryToggle: function (payload) {
   var query = _.clone(this.router.getCurrentQuery())
   log('handleQueryToggle', payload, query)

   if (query[payload.field]) {
     if (isArray(query[payload.field])) {
       log('its an array', query[payload.field])
       if (_.contains(query[payload.field], payload.value)) {
         log('it contains the selected value -> remove it ', payload.value, _.reject(query[payload.field], payload.value)[0])
         if (query[payload.field].length === 2) {
           query[payload.field] = _.find(query[payload.field], function (val) { return val !== payload.value })
         }
         else {
           query[payload.field] = _.remove(query[payload.field], payload.value)
         }

       }
       else {
         log('it does not contain the selected value -> add it ', payload.value, query[payload.field].push(payload.value))
         query[payload.field].push(payload.value)
       }
     }
     else if (query[payload.field] === payload.value) {
       delete query[payload.field]
     }
     else {
       //make an array and add new value to it
       query[payload.field] = [query[payload.field], payload.value]
     }
   }
   else {
     query[payload.field] = payload.value
   }

   log(query)
   this.router.transitionTo(this.getCurrentRoute(), this.getCurrentParams(), query)
 },

 handleFieldReplace: function (payload) {
   var query = _.clone(this.router.getCurrentQuery())
   if (query[payload.field] === payload.value || payload.value === null) {
     delete query[payload.field]
   }
   else {
     query[payload.field] = payload.value
   }

   //dimensions have exclusive values and initial dimensions take precedence
   if (query.d1) {
     query = this.handleDimensionDependencies(query)
   }

   log('query', query)

   this.router.transitionTo(this.getCurrentRoute(), this.getCurrentParams(), query)
 },

 handleDimensionUpdate: function (payload) {
   var dimension = payload.field
   var value = payload.value
   var query = _.clone(this.router.getCurrentQuery())

   if (query[dimension] !== value) {
     this.handleFieldReplace(payload)
   }
  //  else {
  //    //dimension:value is already present -> do nothing
  //  }
 },

 handleDimensionDependencies: function (query) {
   if (query.d1 !== this.router.getCurrentQuery().d1) {
     //new d1
     delete query.d2
     delete query.d3
   }
   if (query.d2 === query.d3) delete query.d3
   if (query.d1 === query.d3) delete query.d3
   if (query.d1 === query.d2) delete query.d2
   _.each(query, function (val, key) {
     if (key === query.d1 || key === query.d2 || key === query.d3 || QUERY_FIELDS_WHITELIST[key]) {
       log('key, value', key, val)
     }
     else {
       delete query[key]
     }
   })

   return query
 },


});

module.exports = RouteStore;
