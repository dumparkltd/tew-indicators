var Fluxxor = require("fluxxor");
var _       = require('lodash')
var log     = require('debug')('stores:data-group-stores')
var sanitise  = require('utils/sanitise')


var DataGroupStore = Fluxxor.createStore({
  initialize: function(options) {
    this.name = options.sheet
    this.data = []
    this.loading = false
    this.loadData = options.loadData
    // call our load data closure with success callback    
    this.loadData({
      key:options.key, 
      bucket:options.bucket, 
      sheet:options.sheet, 
      isProxy:options.isProxy
    }, this.loadDataSuccess)()
    this.loading = true
  },

  loadDataSuccess: function (data) {
    log('success', data)
    this.data = sanitise(data[this.name].elements)
    this.loading = false
    this.emit('change')
  },
  isLoading : function(){
    return this.loading
  },
  // loadDataFailure: function (error) {
  //   //
  // },
  query: function (match) {
    //TODO more query methods
    if (!match) return  this.data
    return _.where(this.data, match)
  },

  //match: func, obj: -> datum
  findOne: function (match) {
    return _.find(this.data, match)
  },

  //filterFunc: function(d): -> array
  filter: function (filterFunc) {
    return _.filter(this.data, filterFunc)
  },

  where: function (deepObj) {
    return _.where(this.data, deepObj)
  }
  //NOTE: methods used if routeStore waitsFor for DisabilityStore to update

  // getState: function () {
  //   return {
  //     selected: this.selected
  //   }
  // },

  // handleSelectDisability: function (payload) {
  //   this.selected = _.where(this.data, { id: payload.Disability })
  // }


});

module.exports = DataGroupStore;
