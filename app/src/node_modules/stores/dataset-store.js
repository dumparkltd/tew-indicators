var Fluxxor = require("fluxxor");
var sanitise  = require('utils/sanitise')

var _       = require('lodash')

var log     = require('debug')('stores:dataset-store')

var DatasetStore = Fluxxor.createStore({
  initialize: function(options) {
    this.name = options.sheet
    this.data = []
    this.loading = false
    this.loadData = options.loadData
    //construct and call our load data closure
    this.loadData(options.key, options.sheet, this.loadDataSuccess)()
    this.loading = true


    this.sortby = options.sortby || {attr : ['observationdate'], asc : [false]};





  },

  loadDataSuccess: function (data) {
    log('success', data)
    this.data = sanitise(data[this.name].elements)

    //convert to date
    this.data = _.map(this.data,function(d){
      d.observationdate = new Date(d.observationdate.toString())
      return d
    })
    this.data = _.sortByOrder(this.data, this.sortby.attr, this.sortby.asc)

    this.loading = false
    this.emit('change')
  },
  isLoading : function(){
    return this.loading
  },

  // loadDataFailure: function (error) {
  //   //
  // },

  // match: object: -> array
  query: function (match) {
    //TODO more query methods
    if (!match) return  this.data
    return _.where(this.data, match)
  },

  //match: func, obj: -> datum
  findOne: function (match) {
    return _.find(this.data, match)
  },

  //filterFunc: function: -> array
  filter: function (filterFunc) {
    return _.filter(this.data, filterFunc)
  },

  byIds : function(ids, sortby) {
    sortby = typeof sortby !== 'undefined' ? sortby : this.sortby;
    return _.sortByOrder(_.filter(this.data, function(item) {
      return _.contains(ids, item.id)
    },this), sortby.attr, sortby.asc)
  },
  getYoungest : function(ids) {
    return _.first(this.byIds(ids,{attr:['observationdate'], asc : [false]}))
  },
  getOldest : function(ids) {
    return _.last(this.byIds(ids,{attr:['observationdate'], asc : [false]}))
  }



});

module.exports = DatasetStore;
