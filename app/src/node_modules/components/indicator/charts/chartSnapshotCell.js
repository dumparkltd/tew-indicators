//main
var React       = require('react')

//helpers

var _ 					= require('lodash')

//logging
var log       	= require('debug')('components:indicator:table-row')

module.exports = React.createClass({

	propTypes : {
    data: React.PropTypes.object
	},

  render: function () {
		// log('props', this.props)
    var View

    if (this.props.data.type === 'horizontal-bar') {
      View = this.renderHorizontalBar()
    }
    else if (this.props.data.type === 'horizontal-bar-histogram') {
      View = this.renderHorizontalBarHisto()
    }
    else if (this.props.data.type === 'horizontal-bar-spacer') {
      View = this.renderHorizontalBarSpacer()
    }
    else {
      View = this.renderLabel()
    }

		return View
  },

  renderHorizontalBar: function () {
    var wrapStyle = { position: 'relative', paddingLeft : 0, paddingRight: 3, paddingTop : 3, paddingBottom : 3 }
    var barStyle = { width: this.props.data.length + '%', backgroundColor: this.props.data.color }
		var labelStyle = { position: 'relative', left: '100%', marginLeft: 6, color:this.props.data.color }		
    if (this.props.data.refLength !== 0) {
      var refStyle = { position: 'absolute', left: this.props.data.refLength + '%', borderLeft: '1px solid', height:'100%',top:0}
    }

    return (
      <td style={{paddingRight: 66}}
        className={ 'cell-horizontal-bar' }
        onClick={this.props.data.onClick}>
        <div className='horizontal-bar-wrap'style={wrapStyle}>
          <div className='cell horizontal-bar'style={barStyle}>
            <span className='cell horizontal-bar-label' style={labelStyle}>{this.props.data.label}</span>
          </div>
        {   (this.props.data.refLength !== 0) 
          ? <div className='horizontal-bar-reference'style={refStyle}></div>
          : <div></div>
        }
        </div>
			</td>
    )
  },
  renderHorizontalBarHisto: function () {
    var wrapStyle = { position: 'relative', padding : 0 }
    var barStyle = { width: this.props.data.length + '%', backgroundColor: this.props.data.color, borderTop: '1px solid #fff'  }
		var labelStyle = { position: 'relative', left: '100%', marginLeft: 6 }		
    if (this.props.data.refLength !== 0) {
      var refStyle = { position: 'absolute', left: this.props.data.refLength + '%', borderLeft: '1px solid', height:'100%',top:0}
    }

    return (
      <td style={{paddingRight: 66}}
        className={ 'cell-horizontal-bar' }
        onClick={this.props.data.onClick}>
        <div className='horizontal-bar-wrap'style={wrapStyle}>
          <div className='cell horizontal-bar'style={barStyle}>
            <span className='cell horizontal-bar-label' style={labelStyle}>{this.props.data.label}</span>
          </div>
        {   (this.props.data.refLength !== 0) 
          ? <div className='horizontal-bar-reference'style={refStyle}></div>
          : <div></div>
        }
        </div>
			</td>
    )
  },

  renderHorizontalBarSpacer: function () {
    var wrapStyle = { position: 'relative', paddingLeft : 0, paddingRight: 3, height : '100%' }
    if (this.props.data.refLength !== 0) {
      var refStyle = { position: 'absolute', left: this.props.data.refLength + '%', borderLeft: '1px solid', height:'100%',top:0}
    }
    return (
      <td style={{paddingRight: 66}}
        className={ 'cell-horizontal-bar-spacer' } >
        <div className='horizontal-bar-wrap'style={wrapStyle}>
        {   (this.props.data.refLength !== 0) 
          ? <div className='horizontal-bar-reference'style={refStyle}></div>
          : <div></div>
        }
        </div>
			</td>
    )
  },

  renderLabel: function () {
		return (
			<td
        className={this.props.data.className}
        onClick={this.props.data.onClick}>
        { this.props.data.label }
			</td>
    )
  }
})
