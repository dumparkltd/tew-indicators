//main
var React       = require('react')

//helpers

//logging
// var log       	= require('debug')('components:indicator:table-row')

module.exports = React.createClass({

	propTypes : {
    data: React.PropTypes.object
	},

  render: function () {
//    log('props', this.props)
    var View

    if (this.props.data.type === 'horizontal-bar') {
      View = this.renderHorizontalBar()
    }
    else if (this.props.data.type === 'horizontal-bar-histogram') {
      View = this.renderHorizontalBarHisto()
    }
    else if (this.props.data.type === 'horizontal-bar-spacer') {
      View = this.renderHorizontalBarSpacer()
    }
    else if (this.props.data.type === 'range-label-top') {
      View = this.renderRangeLabel()
    }
    else if (this.props.data.type === 'range-label-bottom') {
      View = this.renderRangeLabel()
    }
    else if (this.props.data.type === 'range-bar-top') {
      View = this.renderHorizontalBarRangeTop()
    }
    else if (this.props.data.type === 'range-bar-bottom') {
      View = this.renderHorizontalBarRangeBottom()
    }
    else {
      View = this.renderLabel()
    }

		return View
  },

  renderHorizontalBar: function () {
    var wrapStyle = { position: 'relative', paddingLeft : 0, paddingRight: 0, paddingTop : 5, paddingBottom : 5 }
    var barStyle = { width: this.props.data.length + '%', backgroundColor: this.props.data.color }
		var labelStyle = { position: 'relative', left: '100%', marginLeft: 4, color:this.props.data.color }
    if (this.props.data.refLength !== 0) {
      var refStyle = { position: 'absolute', left: this.props.data.refLength + '%', borderLeft: '1px solid', height:'100%',top:0}
    }

    return (
      <td style={{paddingRight: 66}}
        className={ 'cell-horizontal-bar' }
        onClick={this.props.data.onClick}>
        <div className='horizontal-bar-wrap'style={wrapStyle}>
          <div className='cell horizontal-bar'style={barStyle}>
            <span className='cell horizontal-bar-label' style={labelStyle}>{this.props.data.label}</span>
          </div>
        {   (this.props.data.refLength !== 0)
          ? <div className='horizontal-bar-reference'style={refStyle}></div>
          : <div></div>
        }
        </div>
			</td>
    )
  },
  renderHorizontalBarHisto: function () {
    var wrapStyle = { position: 'relative', padding : 0 }
    var barStyle = { width: this.props.data.length + '%', backgroundColor: this.props.data.color, borderTop: '1px solid #fff'  }
		var labelStyle = { position: 'relative', left: '100%', marginLeft: 4 }
    if (this.props.data.refLength !== 0) {
      var refStyle = { position: 'absolute', left: this.props.data.refLength + '%', borderLeft: '1px solid', height:'100%',top:0}
    }

    return (
      <td style={{paddingRight: 66}}
        className={ 'cell-horizontal-bar' }
        onClick={this.props.data.onClick}>
        <div className='horizontal-bar-wrap'style={wrapStyle}>
          <div className='cell horizontal-bar'style={barStyle}>
            <span className='cell horizontal-bar-label' style={labelStyle}>{this.props.data.label}</span>
          </div>
        {   (this.props.data.refLength !== 0)
          ? <div className='horizontal-bar-reference'style={refStyle}></div>
          : <div></div>
        }
        </div>
			</td>
    )
  },

  renderHorizontalBarSpacer: function () {
    var wrapStyle = { position: 'relative', paddingLeft : 0, paddingRight: 3, height : '100%' }
    if (this.props.data.refLength !== 0) {
      var refStyle = { position: 'absolute', left: this.props.data.refLength + '%', borderLeft: '1px solid', height:'100%',top:0}
    }
    return (
      <td style={{paddingRight: 66}}
        className={ 'cell-horizontal-bar-spacer' } >
        <div className='horizontal-bar-wrap'style={wrapStyle}>
        {   (this.props.data.refLength !== 0)
          ? <div className='horizontal-bar-reference'style={refStyle}></div>
          : <div></div>
        }
        </div>
			</td>
    )
  },

  renderHorizontalBarRangeTop : function () {
    var labelStyle = this.props.data.sortDesc
    ? { position:"absolute",left: 0,whiteSpace: 'nowrap'}
    : { position:"absolute",right: '100%',whiteSpace: 'nowrap'}
    var labelWrapStyle = this.props.data.sortDesc
    ? { position:"absolute",left:this.props.data.range.leftOffset + '%'}
    : { position:"absolute",left:this.props.data.range.leftOffset + this.props.data.range.width + '%' }

    return (
      <td className={"cell-horizontal-bar cell-horizontal-bar-range-top "}
          style={{position: "relative",paddingRight: 66}}>
        <div className={ "range-wrapper"}
          style={{
            position: 'relative',
            height: 28
          }}>
          <div className={"gap"}
            style={{
              backgroundColor: "gray",
              height: 3,
              width:  this.props.data.range.width  + '%',
              position: "absolute",
              marginTop: -4,
              top: "100%",
              left:  this.props.data.range.leftOffset  + '%'
            }}></div>
          <div className={"min-icon range-icon"}
            style={{
              border: "4px solid black",
              borderRadius: 4,
              width: 0,
              position: "absolute",
              left: this.props.data.range.leftOffset + '%',
              top: "100%",
              marginTop: -7,
              marginLeft: -2
            }}></div>
          <div className={"max-icon range-icon"}
            style={{
              border: "4px solid black",
              borderRadius: 4,
              width: 0,
              position: "absolute",
              left: this.props.data.range.leftOffset + this.props.data.range.width + '%',
              top: "100%",
              marginTop: -7,
              marginLeft: -2
            }}></div>
          <div className={"top-label-wrap"}
            style={ labelWrapStyle  }>
            <div className={"top-label"}
              style={ labelStyle }>
              { this.props.data.range.label }
            </div>
          </div>
        </div>
      </td>
    )

  },
  renderHorizontalBarRangeBottom : function () {
    var labelStyle = !this.props.data.sortDesc
    ? { position:"absolute",left: 0,whiteSpace: 'nowrap'}
    : { position:"absolute",right: '100%',whiteSpace: 'nowrap'}
    var labelWrapStyle = !this.props.data.sortDesc
    ? { position:"absolute",left:this.props.data.range.leftOffset + '%'}
    : { position:"absolute",left:this.props.data.range.leftOffset + this.props.data.range.width + '%' }

    return (
      <td className={"cell-horizontal-bar cell-horizontal-bar-range-bottom "}
          style={{position: "relative",paddingRight: 66}}>
        <div className={ "range-wrapper"}
          style={{
            position: 'relative',
            height: 28
          }}>
         <div className={"bottom-label-wrap"}
            style={ labelWrapStyle  }>
            <div className={"bottom-label"}
              style={ labelStyle }>
              { this.props.data.range.label }
            </div>
          </div>
        </div>
      </td>
    )

  },

  renderLabel: function () {
		return (
			<td
        className={this.props.data.className}
        onClick={this.props.data.onClick}>
        { this.props.data.label }
			</td>
    )
  },
  renderRangeLabel: function () {
		return (
			<td
        colSpan={this.props.data.colSpan}
        className={this.props.data.className}>
        { this.props.data.label }
			</td>
    )
  }
})
