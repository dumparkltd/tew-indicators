//main
var React       = require('react')

//helpers

var _ 					= require('lodash')

//logging
var log       	= require('debug')('components:indicator:table-cell')

module.exports = React.createClass({

	propTypes : {
    data: React.PropTypes.object
	},

  render: function () {
//    log('props', this.props)
    var View

    if (this.props.data.type === 'horizontal-bar') {
      View = this.renderHorizontalBar()
    }
    else if (this.props.data.type === 'horizontal-bar-histogram') {
      View = this.renderHorizontalBarHisto()
    }
    else if (this.props.data.type === 'horizontal-bar-spacer') {
      View = this.renderHorizontalBarSpacer()
    }
    else if (this.props.data.type === 'range-label-top') {
      View = this.renderRangeLabel()
    }
    else if (this.props.data.type === 'range-label-bottom') {
      View = this.renderRangeLabel()
    }
    else if (this.props.data.type === 'range-bar-top') {
      View = this.renderHorizontalBarRangeTop()
    }
    else if (this.props.data.type === 'range-bar-bottom') {
      View = this.renderHorizontalBarRangeBottom()
    }
    else {
      View = this.renderLabel()
    }

		return View
  },

  renderHorizontalBar: function () {
    var wrapStyle = { position: 'relative', paddingLeft : 0, paddingRight: 0, paddingTop : 5, paddingBottom : 5 }
    var barStyle = { width: this.props.data.length + '%', backgroundColor: this.props.data.color }
		var labelStyle = { position: 'relative', left: '100%', marginLeft: 4, color:this.props.data.color }		
    if (this.props.data.refLength !== 0) {
      var refStyle = { position: 'absolute', left: this.props.data.refLength + '%', borderLeft: '1px solid', height:'100%',top:0}
    }

    return (
      <td style={{paddingRight: 66}}
        className={ 'cell-horizontal-bar' }
        colSpan={this.props.data.colSpan} >
        <div className='horizontal-bar-wrap'style={wrapStyle}>
          <div className='cell horizontal-bar'style={barStyle}>
            <span className='cell horizontal-bar-label' style={labelStyle}>{this.props.data.label}</span>
          </div>
        {   (this.props.data.refLength !== 0) 
          ? <div className='horizontal-bar-reference'style={refStyle}></div>
          : <div></div>
        }
        </div>
			</td>
    )
  },
  renderHorizontalBarHisto: function () {
    var wrapStyle = { position: 'relative', padding : 0 }
    var barStyle = { width: this.props.data.length + '%', backgroundColor: this.props.data.color, borderTop: '1px solid #E3E0D7'  }
		var labelStyle = { position: 'relative', left: '100%', marginLeft: 4 }		
    if (this.props.data.refLength !== 0) {
      var refStyle = { position: 'absolute', left: this.props.data.refLength + '%', borderLeft: '1px solid', height:'100%',top:0}
    }

    return (
      <td style={{paddingRight: 66}}
        className={ 'cell-horizontal-bar' }
        colSpan={this.props.data.colSpan} >
        <div className='horizontal-bar-wrap'style={wrapStyle}>
          <div className='cell horizontal-bar'style={barStyle}>
            <span className='cell horizontal-bar-label' style={labelStyle}>{this.props.data.label}</span>
          </div>
        {   (this.props.data.refLength !== 0) 
          ? <div className='horizontal-bar-reference'style={refStyle}></div>
          : <div></div>
        }
        </div>
			</td>
    )
  },

  renderHorizontalBarSpacer: function () {
    var wrapStyle = { position: 'relative', paddingLeft : 0, paddingRight: 3, height : '100%' }
    if (this.props.data.refLength !== 0) {
      var refStyle = { position: 'absolute', left: this.props.data.refLength + '%', borderLeft: '1px solid', height:'100%',top:0}
    }
    return (
      <td style={{paddingRight: 66}}
        className={ 'cell-horizontal-bar-spacer' }
        colSpan={this.props.data.colSpan} >
        <div className='horizontal-bar-wrap'style={wrapStyle}>
        {   (this.props.data.refLength !== 0) 
          ? <div className='horizontal-bar-reference'style={refStyle}></div>
          : <div></div>
        }
        </div>
			</td>
    )
  },
  
  renderHorizontalBarRangeTop : function () {
    var labelClass = "top-label gap-label " + (this.alignRangeLabel(true) === 'left' ? "label-min" : "label-max" )
    var labelWrapStyle = this.props.data.sortDesc
    ? { position:"absolute",left:this.props.data.range.leftOffset + '%'} 
    : { position:"absolute",left:this.props.data.range.leftOffset + this.props.data.range.width + '%' }
    
    
    return (
      <td className={"cell-horizontal-bar cell-horizontal-bar-range-top "} 
          style={{position: "relative",paddingRight: 66}}
          colSpan={this.props.data.colSpan}>
        <div className={ "range-wrapper"}
          style={{
            position: 'relative',
            height: 28
          }}>                  
          <div className={"gap"} 
            style={{
              width:  this.props.data.range.width  + '%', 
              left:  this.props.data.range.leftOffset  + '%'
            }}></div>
          <div className={"min-icon range-icon"} 
            style={{
              borderColor: this.props.data.sortDesc ? this.props.data.color : this.props.data.colorBottom ,
              left: this.props.data.range.leftOffset + '%',
            }}></div>
          <div className={"max-icon range-icon"} 
            style={{
              borderColor: !this.props.data.sortDesc ? this.props.data.color : this.props.data.colorBottom,
              left: this.props.data.range.leftOffset + this.props.data.range.width + '%'
            }}></div>
          <div className={"top-label-wrap"} 
            style={ labelWrapStyle  }>
            <div className={labelClass} >
              { this.renderRangeGapLabel(true) }
            </div>
          </div>
        </div>
      </td>
    )    
    
  },
  renderHorizontalBarRangeBottom : function () {
    var labelClass = "bottom-label gap-label " + (this.alignRangeLabel(false) === 'left' ? "label-min" : "label-max")
    var labelWrapStyle = !this.props.data.sortDesc
    ? { position:"absolute",left:this.props.data.range.leftOffset + '%'} 
    : { position:"absolute",left:this.props.data.range.leftOffset + this.props.data.range.width + '%' }
    
    return (
      <td className={"cell-horizontal-bar cell-horizontal-bar-range-bottom "} 
          style={{position: "relative",paddingRight: 66}}
          colSpan={this.props.data.colSpan}>
        <div className={ "range-wrapper"}
          style={{
            position: 'relative',
            height: 28
          }}>                  
          <div className={"bottom-label-wrap"} 
            style={ labelWrapStyle  }>
            <div className={ labelClass } >
              { this.renderRangeGapLabel(false) }
            </div>
          </div>
        </div>
      </td>
    )    
    
  },
  alignRangeLabel : function (top) {
    //align range label left if it is the "top" value and soring is DESC (less is better
    //align range label left if it is the "bottom" value and soring is not DESC (less is better
    // or if the value is too small to fit the label
    if (top && this.props.data.sortDesc || !top && !this.props.data.sortDesc || this.props.data.forceLeftAligned) {
      return 'left'
    } else {
      return 'right'
    }
    
  },
  renderRangeGapLabel : function(top){
    // left-aligned
    if (this.alignRangeLabel(top) === 'left') {
      return ([
        <span className={"label-value"}
          style={{color:this.props.data.color }}>
          { this.props.data.range.value }
        </span>,
        <span className={"label-group"}>
          { this.props.data.range.label }
        </span>
      ])
    // right-aligned
    } else  {
      return ([
        <span className={"label-group"}>
          { this.props.data.range.label }
        </span>,
        <span className={"label-value"}
          style={{color:this.props.data.color }}>
          { this.props.data.range.value }
        </span>
      ])      
    }
  },
  renderLabel: function () {
		return (
			<td
        className={this.props.data.className}
        colSpan={this.props.data.colSpan}>
        { this.props.data.label }
			</td>
    )
  },
  renderRangeLabel: function () {
		return (
			<td
        style={{color:this.props.data.color}}
        colSpan={this.props.data.colSpan}
        className={this.props.data.className}>
        { this.props.data.label }
			</td>
    )
  }
})
