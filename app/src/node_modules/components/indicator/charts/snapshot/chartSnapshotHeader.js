//main
var React         = require('react')
//helpers
var _             = require('lodash')


//logging
var log           = require('debug')('components:indicator:table-header')

module.exports = React.createClass({

  propTypes : {
    flux            : React.PropTypes.object,
    breakdowns      : React.PropTypes.array,
    sortOptions     : React.PropTypes.array,
    sortBy          : React.PropTypes.string,
    refDatumLabel    : React.PropTypes.string,
    refLength       : React.PropTypes.number,
    refLabel        : React.PropTypes.string,
    zeroLabel       : React.PropTypes.string
  },


  render: function () {
    log('props', this.props)


    return (
      <thead className='snapshot'>
        <tr className='table-header-groups'>
          {_.map(this.props.breakdowns, function (bd) {
            return (<td className='breakdown-column-header' >{bd.title}</td>)
          })}
          <td className='sort-by-control'>
            {
              (this.props.sortOptions.length > 1) ? this.renderSortByControls() : ''
            }
          </td>
        </tr>
        <tr>
          {_.map(this.props.breakdowns, function () {
            return (<td className='breakdown-column-header-spacer' ></td>)
          })}
          <td style={{paddingLeft: 0, paddingRight: 66}}>
            {
              this.renderReferenceLabels()
            }
          </td>
        </tr>
      </thead>
  )
  },

  renderSortByControls: function () {
    return ['Order by: ' ].concat(
        _.map(this.props.sortOptions, function (option, i, sortOptions) {
          var text = (this.props.sortBy === option) ? [<strong>{option}</strong>] : [option]
          if (i < sortOptions.length - 1) text.push(' | ')
          return <a onClick = {this.handleSortClick(option)} href="#">{text}</a>
        }, this)
      )
  },

  renderReferenceLabels: function () {
    var labels = [<span className='small' style={{position: 'absolute',left: -2}}>{this.props.zeroLabel}</span>]
    if (this.props.refLength !== 0) labels.push(
      <span className='small' style={{position: 'absolute', left:this.props.refLength + '%' }}>
        <strong>{this.props.refDatumLabel + ' '}</strong>
        {this.props.refLabel }
      </span>
    )
    return (
      <div className="ref-wrapper" style={{position:'relative',height:'12px'}}>
        {labels}
      </div>
    )

  },

  handleSortClick: function (value) {
    var self = this
    return function (e) {
      e.preventDefault()
      self.props.flux.actions.indicator.sortBy(value)
    }
  },


})
