//main
var React         = require('react')

var Select         = require('react-select')

//helpers

var _             = require('lodash')
var makeDataLabel = require('utils/makeDataLabel')
var getDataColour = require('utils/getDataColour')

//logging
var log           = require('debug')('components:indicator:table-header')

module.exports = React.createClass({

  propTypes : {
    flux            : React.PropTypes.object,
    breakdowns      : React.PropTypes.array,
    sortOptions     : React.PropTypes.array,
    sortBy          : React.PropTypes.string,
    refDatumLabel    : React.PropTypes.string,
    refLength       : React.PropTypes.number,
    refLabel        : React.PropTypes.string,
    zeroLabel       : React.PropTypes.string
  },


  render: function () {
    log('props', this.props)


    return (
      <thead className='snapshot'>
        <tr className='table-header-groups'>
          {_.map(this.props.breakdowns, function (bd) {
            return (<td className='breakdown-column-header' >{bd.title}</td>)
          })}
          <td className='sort-by-control'>
            { 
              (this.isSortable) ? this.renderSortByControls() : ''              
            }
          </td>
          <td className='key'>
            { 
              (this.hasReference()) ? this.renderKey() : ''              
            }
          </td>
        </tr>
        <tr>
          {_.map(this.props.breakdowns, function (bd) {
            return (<td className='breakdown-column-header-spacer' ></td>)
          })}
          <td style={{paddingLeft: 0, paddingRight: 66}} colSpan={2}>
            {
              this.renderReferenceLabels()
            }
          </td>
        </tr>
      </thead>
  )
  },
  
  hasReference : function(){
    return this.props.refLength !== 0
  },
  isSortable : function(){
    return this.props.sortOptions.length > 1
  },
  renderKey : function(){
    return (
            <div className="key-wrapper" >
              <div className="key-top" >
                <div className="key-label" >Less marginalised</div>
                <div className="key-symbol">
                  <span style={{backgroundColor:getDataColour(true)}}></span>
                </div>
              </div>
              <div className="key-bottom" >
                <div className="key-label" >More marginalised</div>
                <div className="key-symbol">
                  <span style={{backgroundColor:getDataColour(false)}}></span>
                </div>
              </div>
            </div>
    )
  },
  renderSortByControls: function () {
    return (
      <div className="sort-control-inner">
        <div className="sort-label">Order by: </div>
        <ul className="sort-options list-inline">          
          {
            _.map(this.props.sortOptions, function (option) {
              var className = (this.props.sortBy === option) ? 'active' : ''
              return <li className={className}><a onClick={this.handleSortClick(option)} href="#">{option}</a></li>
            }, this)
          }
        </ul>
      </div>
    )
  },

  renderReferenceLabels: function () {
    var labels = [<span className='small' style={{position: 'absolute',left: -2}}>{this.props.zeroLabel}</span>]
    if (this.hasReference()) labels.push(
      <span className='small' style={{position: 'absolute', left:this.props.refLength + '%' }}>
        <strong>{this.props.refDatumLabel + ' '}</strong>
        {this.props.refLabel }
      </span>
    )
    return (
      <div className="ref-wrapper" style={{position:'relative',height:'12px'}}>
        {labels}
      </div>
    )
   
  },

  handleSortClick: function (value) {
    var self = this
    return function (e) {
      e.preventDefault()
      self.props.flux.actions.indicator.sortBy(value)
    }
  },


})
