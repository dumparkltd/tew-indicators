//main
var React       = require('react')


var makeGroupLabel = require('utils/makeGroupLabel')
var getDataColour   = require('utils/getDataColour')

//helpers
var _ 					= require('lodash')

var d3          = require('d3')
var Row 								= require('react-bootstrap/lib/Row')
var Col           			= require('react-bootstrap/lib/Col')
var LineBarChart = require('./lineBarChart')

//logging
var log       	= require('debug')('components:indicator:timeline')



module.exports = React.createClass({

	propTypes : {
    flux        : React.PropTypes.object,
    indicator   : React.PropTypes.object, // tehc urrent indicator
    datasets    : React.PropTypes.array, // datasets/timesteps
    breakdowns  : React.PropTypes.array, // breakdowns
    highlightGroups  : React.PropTypes.array, // breakdowns
    data        : React.PropTypes.array, // filtered data by datasets,breakdowns&groups (including all 'alls')    
    axisScale   : React.PropTypes.number, // the max value
    sortDesc    : React.PropTypes.bool, // the indicator sort order [indicator.order === 'DESC']
	},
  
  getInitialState: function () {

    return {
      highlightDatasets:[]//['HLFS1409']
    }
  },

          
 
  componentDidMount() {
   
  },     
  componentWillUnmount() {
   
  },          
  render: function () {
//		log('props', this.props)
    
    // remove partial group averages    
    var data = _.filter(this.props.data, function(d){
        return _(this.props.breakdowns).every(function(bd){return d[bd.id] !== 'all'}) 
          ||   _(this.props.breakdowns).every(function(bd){return d[bd.id] === 'all'})
      },this)  
    
    // one line for each group
    var dataByGroup = this.parseGroups(data)
    
    var refDatum = this.referenceDatum() 
    
    // set display state for each group by comparing with reference datum
    if (typeof refDatum.value !== 'undefined') {
      dataByGroup = _.map(dataByGroup, function(g){
        if (g.state !== 'active') {
          var val = _.last(_.sortBy(g.data,'x')).y          
          if (val > refDatum.value){            
            g.state = (this.props.sortDesc ? 'bottom' : 'top')
          } else if (val < refDatum.value){
            g.state = (this.props.sortDesc ? 'top' : 'bottom')
          } else {
            g.state = 'ref'
          }
        }
        return g
      },this)
    }
    //move active elements to bac of the array    
    var activeGroups = _.where(dataByGroup,{state:'active'})
    dataByGroup = _.reject(dataByGroup,{state:'active'}).concat(activeGroups)
    
    if (dataByGroup.length === 1) {
      dataByGroup[0].state = 'active'
    }
    
    // one bar for each range
    var rangesByDate = _.sortBy(this.parseDatasets(this.props.datasets),'x')
   
    
    return (
      <Row>
      <Col md={9}>
        <div>
          <LineBarChart
            flux={this.props.flux}
            data={data}
            lineData={dataByGroup}
            barData={rangesByDate}
            axisScale = {this.props.axisScale}
            colours = { {active:'#333', 
                         ref:'#666', 
                         top:getDataColour(true),
                         bottom:getDataColour(false)
                       }}
          />
        </div>
        </Col>
        </Row>
    )
		
  },
  referenceDatum : function(){
     
    if (this.props.indicator.datatype === 'disfactor') {
        return {value:1}
    } else if (this.props.indicator.datatype === 'part-to-whole' && this.props.breakdowns.length === 1 && this.props.breakdowns[0].id === 'sex') {
      return {value: 0.5}
    } else if (this.props.indicator.datatype === 'categorical' || this.props.indicator.datatype === 'absolute' ) {
      // temporary
      return {value:undefined}
    } else {
      var breakdowns = this.props.indicator.breakdowns
      // warning all available breakdowns not the ordered breakdowns
      // filter data by "all" for all breakdowns
      // TODO check for datasets that do not have "All people" average
      var ref = _.findWhere(
        _.filter(this.props.data,function(d){return d.dataset === this.props.datasets[0].id},this),
        _.zipObject(breakdowns.split(','),_.fill(Array(breakdowns.length), 'all'))
      )
      return (typeof ref !== 'undefined') ? ref : {value:undefined}
    }
  },  
  parseGroups : function(data){
    var groups = []
    _.each(data,function(d){
      var groupProperties = this.getGroupProperties(d)
      var groupsFiltered = _.filter(groups, function(g){return _.isEqual(g.group,groupProperties)})
      // if group not in groups add to groups with data
      if (groupsFiltered.length === 0 ) {
        groups.push({
          group : groupProperties,
          state : this.isGroupActive(groupProperties) ? 'active' : 'bottom',
          label : makeGroupLabel(this.props.flux,_.pluck(this.props.breakdowns,'id'),d),          
          data : [{
              x:_.findWhere(this.props.datasets,{id : d.dataset}).observationdate,
              y:d.value,
              datum:d
          }]
        })
      } else {
        groupsFiltered[0].data.push({
          x:_.findWhere(this.props.datasets,{id : d.dataset}).observationdate,
          y:d.value,
          datum:d
        })
      }
      
      
    },this)
    
    return _.map(groups,function(g){
      g.data = _.sortBy(g.data,'x')
      return g
    })
    
  },
  
  parseDatasets : function(datasets){
    return _.map(datasets,function(dataset){
      return {
        x:dataset.observationdate,
        y:[dataset.range.top.value, dataset.range.bottom.value],
        active : this.state.highlightDatasets.indexOf(dataset.id) > -1,
        groups:[this.getGroupProperties(dataset.range.top), this.getGroupProperties(dataset.range.bottom)],
        data:[dataset.range.top, dataset.range.bottom]
      }
    },this)
  },
  getGroupProperties : function(datum){
    return _.map(this.props.breakdowns,function(bd){        
      return datum[bd.id]
    })
  },
  isGroupActive : function(groupProperties){
    return _.filter(this.props.highlightGroups, function(g){return _.isEqual(g,groupProperties)}).length > 0
  },
  
          
          


})
