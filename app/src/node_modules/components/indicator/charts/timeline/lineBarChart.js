//main
var React       = require('react')

//helpers
var _ 					= require('lodash')

var d3          = require('d3')
//var Line        = require('./line')
//logging
var log       	= require('debug')('components:indicator:lineBarChart')



module.exports = React.createClass({

	propTypes : {
    flux        : React.PropTypes.object,
    lineData    : React.PropTypes.array,
    barData     : React.PropTypes.array,
    width       : React.PropTypes.string,
    height      : React.PropTypes.number,
    axisScale   : React.PropTypes.number,
    colour      : React.PropTypes.string,
	},
  
  getInitialState: function () {

    return {
      parentWidth: 0
    }
  },

  getDefaultProps() {
      return {
          width: '100%',
          height: 300,
          axisScale: 1,
          margin: { left: -1, top: 10, bottom: 0, right: 1 }
      }
  },
          
  handleWindowResize(e) {
      var elem = this.getDOMNode();
      var width = elem.offsetWidth;

      this.setState({
          parentWidth: width
      });
  },
  componentDidMount() {
    if(this.props.width === '100%') {
        window.addEventListener('resize', this.handleWindowResize);
    }
    this.handleWindowResize();
  },     
  componentWillUnmount() {
    if(this.props.width === '100%') {
        window.removeEventListener('resize', this.handleWindowResize);
    }
  },          
  render: function () {
		log('props', this.props)
    var width = this.props.width
    var height = this.props.height
    // Determine the right graph width to use if it's set to be responsive
    if(width === '100%') {
      width = this.state.parentWidth || 400;
    }     
    log('parentWidth', this.state.parentWidth)
    log('width', width)
    // create x and y scales that map the chart dimensions to the min/max x and y values in the data
    var xMin = 0, 
        xMax = width, 
        yMin = height, 
        yMax = 0;
    var barData = this.props.barData
    var x = d3.time.scale().domain([_.first(barData).x,_.last(barData).x]).range([xMin, xMax]);
    var y = d3.scale.linear().domain([0,this.props.axisScale]).range([yMin, yMax]);
    
    var line = d3.svg.line()
    .x(function(d) { return x(d.x); })
    .y(function(d) { return y(d.y); });
    
    return (

      <div>
        <svg ref='svg' width={width} height={height} className='chart line-bar-chart'>
        {
          _.map(this.props.lineData,function(group){
            return (
              <g>
              <path 
                d={line(group.data)}
                fill={'none'}
                strokeWidth={1}
                stroke={this.getColour(group.state)}
                onMouseOver={this.handleLineMouseOver.bind(this,group.group)}
                onMouseOut={this.handleLineMouseOut.bind(this,group.group)}
              />
              </g>
            )
          },this)
        }
        </svg>
      </div>

    )		
  },
          
  getColour :function (state){
    return this.props.colours[state]
  },
  
  handleLineMouseOver: function (group) {
    var self = this
    log('handleLineMouseOver',group)

    self.props.flux.actions.indicator.lineChart.highlightGroup(group)
    
  },

  handleLineMouseOut: function (group) {
    var self = this
    log('handleLineMouseOut',group)    
    self.props.flux.actions.indicator.lineChart.unHighlightGroup(group)
    
  }


})
