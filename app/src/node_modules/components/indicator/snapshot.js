//main
var React       = require('react')

//components
var Select      = require('react-select')
var TableHeader	= require('./table-header')
var TableRow		= require('./table-row')

//helpers
var _ 					= require('lodash')

//logging
var log       	= require('debug')('components:indicator:snapshot')

module.exports = React.createClass({

	propTypes : {
		flux: React.PropTypes.object,
		params: React.PropTypes.object,
    data: React.PropTypes.array,
		dataGroups: React.PropTypes.array,
    datasets: React.PropTypes.array,
		breakdowns: React.PropTypes.array,
		indicator: React.PropTypes.object
	},

	getInitialState: function () {
		return {
			tableHeaderGroups: [
			'Breakdowns', 'Order', 'Show'
			],
			breakdownIds: [ //NOTE hardcoded for now //these have an order assumption
				'sex', 'ethnicity', 'age'
			],
			shortToTitle: this.getShortToTitle(this.props.dataGroups)
		}
	},

  render: function () {
		log('props', this.props)
		var flux = this.props.flux
		var order = (this.props.indicator.order === 'DESC')
		var sortedData = _.sortByOrder(this.props.data, 'value', order)
    var DateComponent
    var options = _.map(this.props.datasets, function (dataset) {
      return {
        value: String(dataset['observation_date']),
        label: 'Year: '+ dataset['observation_date']
      }
    })

    log('options', options)
		log('sortedData', sortedData)

    //set DateComponent
		if (options.length > 1) {
			DateComponent = (
				<Select
					name='indicator-date-dropdown'
					value={options[0].value}
					options={options} //TODO remove initial value from options ?
					onChange={this.handleDateSelect} />
			)
		}
		else {
			DateComponent = <h3>{options[0].label}</h3>
		}

		return (
			<div className='snapshot'>
        <div className={options.length > 1 ? 'date-dropdown' : 'date-header'}>
          {DateComponent}
        </div>
				<table className='table'>
	        <TableHeader breakdowns={this.props.breakdowns} tableHeaderGroups={this.state.tableHeaderGroups} />
					<tbody className='table-body'>
						{_.map(sortedData, function (d) {
							log('d', d, this.state.breakdownIds, this.state.shortToTitle)
							return (
								<TableRow
									datum={d}
									breakdownIds={this.state.breakdownIds} //ordered
									shortToTitle={this.state.shortToTitle} />
							)
						})}
					</tbody>
				</table>
			</div>

  )
  },

	componentWillReceiveProps: function (nextProps) {
			this.setState({ shortToTitle: this.getShortToTitle(nextProps.dataGroups) })
	},

	handleDateSelect: function () {
		//TODO
	},

	getShortToTitle: function (dataGroups) {
		var shortToTitle = {}
		_.map(dataGroups, function (dataGroup) {
			shortToTitle[dataGroup.short] = dataGroup.title
		})
		return shortToTitle
	}


})
