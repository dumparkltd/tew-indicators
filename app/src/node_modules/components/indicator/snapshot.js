//main
var React       = require('react')

//components
var Select      = require('react-select')
var TableHeader	= require('./table-header')

//helpers
var _ 					= require('lodash')

//logging
var log       	= require('debug')('components:indicator:snapshot')

module.exports = React.createClass({

	propTypes : {
		flux: React.PropTypes.object,
		params: React.PropTypes.object,
    data: React.PropTypes.array,
    datasets: React.PropTypes.array,
		breakdowns: React.PropTypes.array,
		indicator: React.PropTypes.object
	},

	getInitialState: function () {
		return {
			tableHeaderGroups: [
			'Breakdowns', 'Order', 'Show'
			],
			breakdownOrder: [ //NOTE hardcoded for now
				'sex', 'ethnicity', 'age'
			],

		}
	},

  render: function () {
		log('props', this.props)
		var flux = this.props.flux
		var order = (this.props.indicator.order === 'DESC')
    var DateComponent
    var options = _.map(this.props.datasets, function (dataset) {
      return {
        value: String(dataset['observation_date']),
        label: 'Year: '+ dataset['observation_date']
      }
    })

    log('options', options)
    //set DateComponent
		if (options.length > 1) {
			DateComponent = (
				<Select
					name='indicator-date-dropdown'
					value={options[0].value}
					options={options} //TODO remove initial value from options ?
					onChange={this.handleDateSelect} />
			)
		}
		else {
			DateComponent = <h3>{options[0].label}</h3>
		}

		var sortedData = _.sorByOrder(this.props.data, 'value', order)

		return (
			<div className='snapshot'>
        <div className={options.length > 1 ? 'date-dropdown' : 'date-header'}>
          {DateComponent}
        </div>
				<table className='table'>
	        <TableHeader breakdowns={this.props.breakdowns} tableHeaderGroups={this.state.tableHeaderGroups} />
					<tbody className='table-body'>
						{_.map(sortedData, function (d) {
							// return 
						}}
					</tbody
				</table>
			</div>

  )

		//Year: (most recent Year)

		//breakdown 1: breakdown 2:... Order:


		// var columns = Object.keys(data[0]).map(function (key) { return capitalize(key) })
		//
    // return (
		// 	<div className='indicator'>
		// 		<h2>{indicator.title}</h2>
		// 		<Table className='indicator-table table' columns={columns} data={data}/>
		// 	</div>
    // )

  },




	handleDateSelect: function () {
		//TODO
	}


})
