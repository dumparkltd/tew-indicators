//main
var React       = require('react')

//components
var Button         = require('react-bootstrap/lib/Button')
var ButtonGroup   = require('react-bootstrap/lib/ButtonGroup')

//helpers
var _           = require('lodash')

//logging
var log         = require('debug')('components:indicator:filters:filter-groups')

module.exports = React.createClass({

  propTypes : {
    flux: React.PropTypes.object,
    dataGroupMatrix: React.PropTypes.array,
    breakdowns: React.PropTypes.array,
    groupHasActiveFilter: React.PropTypes.array,
  },

  render: function () {
    log('props', this.props)
    var footnotes = this.renderFootnotes(this.props.dataGroupMatrix)

    return (
      <div className="hrc-filter hrc-filter-groups">
        <div className="groups-filters">
          <h5 className='filters-header emphasis'>By group</h5>
            {
              _.map(this.props.dataGroupMatrix, function (dataGroups, i) {
                return this.renderFilterGroup(dataGroups, this.props.breakdowns[i], i)
              }, this)
            }
        </div>
        <div className="groups-footnotes">
          {footnotes}
        </div>
      </div>
    )

  },

  renderFilterGroup: function (dataGroups, breakdown, i) {

    var ClearAll = this.props.groupHasActiveFilter[i] ? (
      <a className="filter-group-clear-all pull-right" href="#" onClick={this.handleClearAll(breakdown.id)}>Clear all</a>
    ) : null


    return (

        <div className="filter-group">
          <div className="filter-group-title">
            <h6>{breakdown.title}</h6>
            { ClearAll }
          </div>
          <ButtonGroup vertical className="filter-group-btn-list">
            {
              _(dataGroups)
                .map(function (dataGroup) {
                  return (
                    <Button
                      className="filter-group-btn-list-button"
                      active={dataGroup.active}
                      bsSize='small'
                      onClick={this.handleFilterClick(dataGroup.breakdown, dataGroup.short)}>
                      {dataGroup.title}
                    </Button>
                  )
                }, this)
                .value()
            }
          </ButtonGroup>
        </div>


    )
  },

  renderFootnotes: function (dataGroupMatrix) {
    return _(dataGroupMatrix)
      .flatten()
      .reject(function (dataGroup) { return !dataGroup.footnote || dataGroup.footnote === "" })
      .map(function (dataGroup) {
        log('dataGroup in footnote', dataGroup)
        return (
          <p className='footnote small'>{dataGroup.footnote}</p>
        )
      })
      .value()

  },

  // getFilterTitle: function (dataGroup) {
  //
  // },

  handleClearAll: function (field) {
    var self = this
    return function (e) {
      e.preventDefault()
      self.props.flux.actions.indicator.selectFilter(field, null)
    }
  },

  handleFilterClick: function (field, value) {
    var self = this
    return function (e) {
      e.preventDefault()
      self.props.flux.actions.indicator.toggleFilter(field, value)
    }
  }
})
