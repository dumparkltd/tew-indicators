//main
var React       = require('react')

//components
var Select        = require('react-select')
var Button         = require('react-bootstrap/lib/Button')
var ButtonToolbar  = require('react-bootstrap/lib/ButtonToolbar')
var ButtonGroup   = require('react-bootstrap/lib/ButtonGroup')
var ListGroup     = require('react-bootstrap/lib/ListGroup')
var ListGroupItem = require('react-bootstrap/lib/ListGroupItem')
var Grid          = require('react-bootstrap/lib/Grid')
var Row           = require('react-bootstrap/lib/Row')
var Col           = require('react-bootstrap/lib/Col')


//helpers
var _           = require('lodash')

//logging
var log         = require('debug')('components:indicator:filters')

module.exports = React.createClass({

  propTypes : {
    flux: React.PropTypes.object,
    dataGroupMatrix: React.PropTypes.array,
    breakdowns: React.PropTypes.array,
  },

  render: function () {
    log('props', this.props)
    var self = this
    var flux = this.props.flux
    var footnotes = this.renderFootnotes(this.props.dataGroupMatrix)


    return (
      <div>
        <Row>
          <h3 className='filters-header'>
            BY GROUP
          </h3>
            {
              _.map(this.props.dataGroupMatrix, function (dataGroups, i) {
                return this.renderFilterGroup(dataGroups, this.props.breakdowns[i])
              }, this)
            }
        </Row>
        <Row>
          {footnotes}
        </Row>
      </div>
    )

  },

  renderFilterGroup: function (dataGroups, breakdown) {
    log('dataGroups', dataGroups)
    log('breakdown', breakdown)
    return (
      <Row>
        <Col md={3} >
          <p><strong>{breakdown.title}</strong></p>
          <ButtonGroup vertical>
            {
              _(dataGroups)
                .map(function (dataGroup) {
                  return (
                    <li style={{ listStyleType: 'none' }}>
                      <Button
                        style={{marginTop: 5 }}
                        active={dataGroup.active}
                        bsSize='small'
                        onClick={this.handleFilterClick(dataGroup.breakdown, dataGroup.short)}>
                        {dataGroup.title}
                      </Button>
                    </li>
                  )
                }, this)
                .value()
            }
          </ButtonGroup>
        </Col>
        <Col md={6} >
          <a href="#" onClick={this.handleClearAll(breakdown.id)}>Clear all</a>
        </Col>
      </Row>
    )
  },

  renderFootnotes: function (dataGroupMatrix) {
    return _(dataGroupMatrix)
      .flatten()
      .reject(function (dataGroup) { return !dataGroup.footnote || dataGroup.footnote === "" })
      .map(function (dataGroup) {
        log('dataGroup in footnote', dataGroup)
        return (
          <p className='footnote small'>{dataGroup.footnote}</p>
        )
      })
      .value()

  },

  // getFilterTitle: function (dataGroup) {
  //
  // },

  handleClearAll: function (field) {
    var self = this
    return function (e) {
      e.preventDefault()
      self.props.flux.actions.indicator.selectFilter(field, null)
    }
  },

  handleFilterClick: function (field, value) {
    var self = this
    return function (e) {
      e.preventDefault()
      self.props.flux.actions.indicator.toggleFilter(field, value)
    }
  }
})
