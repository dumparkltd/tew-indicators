//main
var React       = require('react')

//components
var Input      	= require('react-bootstrap/lib/Input')
var Col         = require('react-bootstrap/lib/Col')
var Row         = require('react-bootstrap/lib/Row')


//helpers
var _ 					= require('lodash')

//logging
var log       	= require('debug')('components:indicator:time-select')

var style = {
	filterControl: {
		marginLeft: 20
	},
}

module.exports = React.createClass({

	propTypes : {
		flux: React.PropTypes.object,
		query: React.PropTypes.object,
		// datasets: React.PropTypes.array,
		indicator: React.PropTypes.object,
		dateOptions: React.PropTypes.array
	},

  getInitialState: function () {
    var optionsMap = {}
    _.each(this.props.dateOptions, function (option) {
      optionsMap[option.value] = option
    })

    return {
      optionsMap: optionsMap
    }
  },

  componentWillReceiveProps: function (nextProps) {
    var optionsMap = {}
    _.each(nextProps.dateOptions, function (option) {
      optionsMap[option.value] = option
    })

    this.setState({ optionsMap: optionsMap })
  },

  render: function () {
		log('props', this.props, this.state)
		var flux = this.props.flux
		var dateClassName
    var DateComponent
    var ViewSelect
    var TimeLineSelect
		var selectedOption = { value: null }

		if (this.props.query.dataset && this.props.query.dataset !== 'all') {
			selectedOption = _.find(this.props.dateOptions, function (option) {
				return option.dataset.id === this.props.query.dataset
			}, this)
		}

		if (this.props.dateOptions.length > 1) {
			dateClassName = 'date-dropdown'
			DateComponent = (
				<Input
          style={{ width: 85 }}
          type='select'
					name='indicator-date-dropdown'
					value={selectedOption.value}
					onChange={this.handleDateSelect} >
          {
            _.map(this.props.dateOptions, function (option) {
              return (
                <option value={option.value}>{option.label}</option>
              )
            })
          }
        </Input>
			)
		}
		else {
			dateClassName = 'date-header'
			DateComponent = <h3>{ this.props.dateOptions[0] ? this.props.dateOptions[0].label : null }</h3>
		}

    if (this.props.dateOptions.length > 1) {
      TimeLineSelect = (
        <Row>
          <p onClick={this.handleViewSelect('Timeline')}>Over Time</p>
        </Row>
      )
    }
    else {
      TimeLineSelect = (<div></div>)
    }

		ViewSelect = (
      <Col md={2} style={{ float: 'right' }}>
        <Row>
          <p onClick={this.handleViewSelect('SnapShot')}>SnapShot</p>
        </Row>
        {TimeLineSelect}
      </Col>
    )


    return (
      <Row>
        <Col md={1}>
          {DateComponent}
        </Col>
        {ViewSelect}
      </Row>
    )

    DateComponent
  },

  handleDateSelect: function (e) {
    log('e', e.target.value)
    var datasetId = this.state.optionsMap[e.target.value].dataset.id
    this.props.flux.actions.indicator.selectFilter('dataset', datasetId)
  },

  handleViewSelect: function (view) {
    return function () {
      //TODO
    }
  }



})
