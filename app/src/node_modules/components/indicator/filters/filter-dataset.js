//main
var React       = require('react')

//components
var Input      	= require('react-bootstrap/lib/Input')
var Col         = require('react-bootstrap/lib/Col')
var Row         = require('react-bootstrap/lib/Row')
var Button         = require('react-bootstrap/lib/Button')
var DropdownButton         = require('react-bootstrap/lib/DropdownButton')
var MenuItem         = require('react-bootstrap/lib/MenuItem')


//helpers
var _ 					= require('lodash')

//logging
var log       	= require('debug')('components:indicator:time-select')

var style = {
	filterControl: {
		marginLeft: 20
	},
}

module.exports = React.createClass({

	propTypes : {
		flux: React.PropTypes.object,
		indicator: React.PropTypes.object,
		dateOptions: React.PropTypes.array
	},

  getInitialState: function () {
    return {
    }
  },


  render: function () {
		log('props', this.props, this.state)
		var flux = this.props.flux
		var dateClassName
    var DateComponent
    var ViewSelect
    var TimeLineSelect
    
    var dateOptions = this.props.dateOptions
    var selectedOption = _.filter(dateOptions,{active:true})[0]
		
    
    if (dateOptions.length <= 1) { 
            log('props', this.props)

      return (
        <div className="hrc-filter hrc-filter-dataset">
          <h5 className='emphasis'>Year</h5>
          <div className='date-filter-options'>
            <div className="only-dataset"> 
              {selectedOption.label} 
            </div>
          </div>
        </div>
      )      
    } else {
			
			DatasetSelect = (
        <DropdownButton bsStyle={'link'} title={selectedOption.label} key={0}>
          {
            _.map(dateOptions, function (option) {
              if (option.value === selectedOption.value){
                return (
                   <MenuItem                   
                    disabled
                   >{option.label}</MenuItem>
                )
              } else {
                return (
                   <MenuItem                   
                    eventKey={option.value}
                    onSelect={this.handleDatasetSelect}
                   >{option.label}</MenuItem>
                )
              }
            },this)          
          }
        </DropdownButton>
			)


      if (this.props.indicator.datatype !== 'categorical') {
        ViewSelect = (
          [
            <a className={(this.props.activeView === 'snapshot') ? 'btn active' : 'btn' }
              onClick={this.handleViewSelect('snapshot')} >
              <div className="date-filter-label">Snapshot</div>
              <div className="icon-snapshot"></div>
            </a>,
            <a className={(this.props.activeView === 'timeline') ? 'btn active' : 'btn' }
              onClick={this.handleViewSelect('timeline')} >
              <div className="date-filter-label">Over time</div>
              <div className="icon-timeline"></div>
            </a>  
          ]
        )      

      }
      else {
        ViewSelect = (<div />)
      }



      return (
        <div className="hrc-filter hrc-filter-dataset">
          <h5 className='emphasis'>Over time</h5>
          <div className='date-filter-group'>
            { ViewSelect }
          </div>
          {
            (this.props.activeView === 'snapshot')
            ? <div className='date-filter-options'>
                { DatasetSelect }
              </div>
            : <div className='date-filter-options'/>
          }
        </div>
      )
    }
  },

  handleDatasetSelect: function (id) {
    log('handleDatasetSelect',id)
    this.props.flux.actions.indicator.selectFilter('dataset', id)    
  },

  handleViewSelect: function (view) {
    var self = this
    return function (e) {
      e.preventDefault()
      if (view === 'timeline') {
        self.props.flux.actions.indicator.selectFilter('dataset', 'all')
      } else {
        self.props.flux.actions.indicator.selectFilter('dataset', self.props.dateOptions[0].value)
      }
    }
  }



})
