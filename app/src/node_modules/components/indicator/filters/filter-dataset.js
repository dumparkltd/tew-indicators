//main
var React       = require('react')

//components
var DropdownButton         = require('react-bootstrap/lib/DropdownButton')
var MenuItem         = require('react-bootstrap/lib/MenuItem')


//helpers
var _ 					= require('lodash')

//logging
var log       	= require('debug')('components:indicator:time-select')


module.exports = React.createClass({

	propTypes : {
		indicator: React.PropTypes.object,
		dateOptions: React.PropTypes.array,
		activeView: React.PropTypes.string,
		flux: React.PropTypes.object
	},

  getInitialState: function () {
    return {
    }
  },


  render: function () {
		log('props', this.props, this.state)
    var ViewSelect
		var DatasetSelect

    var dateOptions = this.props.dateOptions
    var selectedOption = _.filter(dateOptions,{active:true})[0]


    if (dateOptions.length > 1) {

			DatasetSelect = (
        <DropdownButton bsStyle={'link'} title={selectedOption.label} key={0}>
          {
            _.map(dateOptions, function (option) {
              if (option.value === selectedOption.value){
                return (
                   <MenuItem
                    disabled
                   >{option.label}</MenuItem>
                )
              } else {
                return (
                   <MenuItem
                    eventKey={option.value}
                    onSelect={this.handleDatasetSelect}
                   >{option.label}</MenuItem>
                )
              }
            },this)
          }
        </DropdownButton>
			)
		}
		else {

			DatasetSelect = <div className="only-dataset"> {selectedOption.label} </div>
		}

    if (this.props.dateOptions.length > 1 && this.props.indicator.datatype !== 'categorical') {
      ViewSelect = (
        [
          <a className={(this.props.activeView === 'snapshot') ? 'btn active' : 'btn' }
            onClick={this.handleViewSelect('snapshot')} >
            <div className="date-filter-label">Snapshot</div>
            <div className="icon-snapshot"></div>
          </a>,
          <a className={(this.props.activeView === 'timeline') ? 'btn active' : 'btn' }
            onClick={this.handleViewSelect('timeline')} >
            <div className="date-filter-label">Over time</div>
            <div className="icon-timeline"></div>
          </a>
        ]
      )

    }
    else {
      ViewSelect = (<div />)
    }



    return (
      <div>
        <h5 className='emphasis'>Over time</h5>
        <div className='date-filter-group'>
          { ViewSelect }
        </div>
        {
          (this.props.activeView === 'snapshot')
          ? <div className='date-filter-options'>
              { DatasetSelect }
            </div>
          : <div className='date-filter-options'/>
        }
      </div>
    )

  },

  handleDatasetSelect: function (id) {
    log('handleDatasetSelect',id)
    this.props.flux.actions.indicator.selectFilter('dataset', id)
  },

  handleViewSelect: function (view) {
    var self = this
    return function (e) {
      e.preventDefault()
      if (view === 'timeline') {
        self.props.flux.actions.indicator.selectFilter('dataset', 'all')
      } else {
        self.props.flux.actions.indicator.selectFilter('dataset', self.props.dateOptions[0].value)
      }
    }
  }



})
