//main
var React       = require('react')

//components
var Input        = require('react-bootstrap/lib/Input')
var Col         = require('react-bootstrap/lib/Col')
var Row         = require('react-bootstrap/lib/Row')
var Button         = require('react-bootstrap/lib/Button')


//helpers
var _           = require('lodash')

//logging
var log         = require('debug')('components:indicator:time-select')

module.exports = React.createClass({

  propTypes : {
    flux: React.PropTypes.object,
    indicator: React.PropTypes.object,
    dateOptions: React.PropTypes.array,
    activeView: React.PropTypes.string,
    timelineOption: React.PropTypes.bool
  },

  getInitialState: function () {
    var optionsMap = {}
    _.each(this.props.dateOptions, function (option) {
      optionsMap[option.value] = option
    })

    return {
      optionsMap: optionsMap
    }
  },

  componentWillReceiveProps: function (nextProps) {
    var optionsMap = {}
    _.each(nextProps.dateOptions, function (option) {
      optionsMap[option.value] = option
    })

    this.setState({ optionsMap: optionsMap })
  },

  render: function () {
    log('props', this.props, this.state)
    var flux = this.props.flux
    var dateClassName
    var DateComponent
    var TimeLineSelect

    var dateOptions = this.props.dateOptions
    var selectedOption = _.filter(dateOptions,{active:true})


    if (dateOptions.length > 1) {
      dateClassName = 'date-dropdown'
      DateComponent = (
        <div className='date-filter-date-select-wrapper icon-dropdown-arrow'>
          <Input
            className='date-filter-date-select'
            type='select'
            name='indicator-date-dropdown'
            value={selectedOption.value}
            onChange={this.handleDatasetSelect} >
            {
              _.map(dateOptions, function (option) {
                return (
                  <option value={option.value}>{option.label}</option>
                )
              })
            }
          </Input>
        </div>
      )
    }
    else {
      dateClassName = 'date-header'
      DateComponent = <h3>{ this.props.dateOptions[0] ? this.props.dateOptions[0].label : null }</h3>
    }

    if (this.props.timelineOption) {
      TimeLineSelect = (
        <li onClick={this.handleViewSelect('timeline')} className='date-filter-timeline date-filter-icon'>
          <div className={ (this.props.activeView === 'timeline') ? 'date-filter-title active' : 'date-filter-title' }>Over time</div>
          <div className={(this.props.activeView === 'timeline') ? 'icon-timeline-active' : 'icon-timeline'}></div>
        </li>
      )
    }
    else { TimeLineSelect = null }

    return (
      <Row>
        <h4 className='text-uppercase emphasis row'><strong>Over time</strong></h4>
        <ul className='date-filter-group list-inline row'>
          <li onClick={this.handleViewSelect('snapshot')} className='date-filter-snapshot date-filter-icon'>
            <div className={ (this.props.activeView === 'snapshot') ? 'date-filter-title active' : 'date-filter-title' }>Snapshot</div>
            <div className={(this.props.activeView === 'snapshot') ? 'icon-snapshot-active' : 'icon-snapshot'}></div>
          </li>
          { TimeLineSelect }
        </ul>
        <Row>
          {DateComponent}
        </Row>
      </Row>
    )

  },

  handleDatasetSelect: function (e) {
    log('e', e.target.value)
    var datasetId = this.state.optionsMap[e.target.value].dataset.id
    this.props.flux.actions.indicator.selectFilter('dataset', datasetId)
  },

  handleViewSelect: function (view) {
    var self = this
    return function (e) {
      e.preventDefault()
      if (view === 'timeline') {
        self.props.flux.actions.indicator.selectFilter('dataset', 'all')
      } else {
        self.props.flux.actions.indicator.selectFilter('dataset', self.props.dateOptions[0].value)
      }
    }
  }



})
