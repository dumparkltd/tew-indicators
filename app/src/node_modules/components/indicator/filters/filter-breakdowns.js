//main
var React       = require('react')

//components
var ListGroup     = require('react-bootstrap/lib/ListGroup')
var ListGroupItem = require('react-bootstrap/lib/ListGroupItem')



//helpers
var _           = require('lodash')
Number.isNaN = require('is-nan')
var ordinal     = require('ordinal').english

//logging
var log         = require('debug')('components:indicator:filters:filter-breakdowns')

function isCategorical (dimOptions) {
  if (dimOptions.length === 1 && dimOptions[0].id === 'cat') return true
  return false
}

module.exports = React.createClass({

  propTypes : {
    flux: React.PropTypes.object,
    queryArg : React.PropTypes.string,
    breakdownOptions: React.PropTypes.array,
  },

  render: function () {
    log('props', this.props)
    var self = this
    
    if (this.props.breakdownOptions.length <= 1 && this.props.breakdownOptions[0].length <= 1) {
      return (
        <div className='filter-breakdowns'>
          <div className='filter-breakdowns-header'>
            <h5>Explore data</h5>
          </div>
        </div>
      )      
    } else {
    
      var dimensions = (
        <div className='hrc-filter hrc-filter-breakdown'>
          {
            _.map(this.props.breakdownOptions,function(dimension, dim_index, breakdownOptions){
              var dimensionTitle = (breakdownOptions.length > 1 && !isCategorical(breakdownOptions[dim_index])) ?
                (<div className='filter-breakdown-title'>{ordinal(dim_index+1) + ' dimension'}</div>) :
                null
              return (
                [
                  <div className="filter-breakdown-dimension" >
                    {dimensionTitle}
                    <ListGroup className>
                      {
                        _.map(dimension,function(option,index){
                            if(option.optional) {
                              return (
                                <ListGroupItem
                                  className='hrc-list-group-item'
                                  href='#'
                                  active={option.active}
                                  onClick={self.handleDimensionClick(dim_index+1, option.id)}>
                                      {option.title}
                                </ListGroupItem>
                              )
                            }
                        })

                      }
                    </ListGroup>
                  </div>,
                  (dim_index < (breakdownOptions.length-1))
                  ? <div className="dimension-connector">and</div>
                  : <div/>

                ]
              )
            })
          }
        </div>
      )

      return (
        <div className='filter-breakdowns'>
          <div className='filter-breakdowns-header'>
            <h5>Explore data <span className='emphasis'>by breakdown</span></h5>
          </div>
          {dimensions}
        </div>
      )
    }
  },

  handleDimensionClick: function (dimensionIndex, breakdownId) {
    var self = this
    var dimension = this.props.queryArg + dimensionIndex
    return function (e) {
      e.preventDefault()
      self.props.flux.actions.indicator.selectDimension(dimension, breakdownId)
    }
  }
})
