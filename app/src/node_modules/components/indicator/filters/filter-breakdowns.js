//main
var React       = require('react')

//components
var Select        = require('react-select')
var Button         = require('react-bootstrap/lib/Button')
var ButtonToolbar  = require('react-bootstrap/lib/ButtonToolbar')
var ListGroup     = require('react-bootstrap/lib/ListGroup')
var ListGroupItem = require('react-bootstrap/lib/ListGroupItem')
var Grid          = require('react-bootstrap/lib/Grid')
var Row           = require('react-bootstrap/lib/Row')
var Col           = require('react-bootstrap/lib/Col')


//helpers
var _           = require('lodash')
var ordinal     = require('ordinal').english

//logging
var log         = require('debug')('components:indicator:filters:filter-breakdowns')

module.exports = React.createClass({

  propTypes : {
    flux: React.PropTypes.object,
    queryArg : React.PropTypes.string,
    breakdownOptions: React.PropTypes.array,
  },

  render: function () {
    log('props', this.props)
    var self = this

    var dimensions = (
      <Row className='dimensions'>
        {
          _.map(this.props.breakdownOptions,function(dimension,dim_index){
            var className = "dimension-"+dim_index
            return (
              <Col className={className} xs={3} md={2} >
                <p className='dimension-title'>{ordinal(dim_index+1) + ' dimension'}</p>
                <ListGroup className>
                  {
                    _.map(dimension,function(option,index){
                        if(option.optional) {
                          return (
                            <ListGroupItem
                              href='#'
                              active={option.active}
                              onClick={self.handleDimensionClick(dim_index+1, option.id)}>
                                  {option.title}
                            </ListGroupItem>
                          )
                        }
                    })

                  }
                </ListGroup>
              </Col>
            )
          })
        }
      </Row>
    )

    return (
      <Grid className='explore-data'>
        <Row className='header'>
          <h3>Explore data by</h3>
        </Row>
        {dimensions}
      </Grid>
    )
  },

  handleDimensionClick: function (dimensionIndex, breakdownId) {
    var self = this
    var dimension = this.props.queryArg + dimensionIndex
    return function (e) {
      e.preventDefault()
      self.props.flux.actions.indicator.selectDimension(dimension, breakdownId)
    }
  }
})
