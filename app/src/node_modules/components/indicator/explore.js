//main
var React       = require('react')

//components
var Select      	= require('react-select')
var Button 				= require('react-bootstrap/lib/Button')
var ButtonToolbar	= require('react-bootstrap/lib/ButtonToolbar')
var ListGroup     = require('react-bootstrap/lib/ListGroup')
var ListGroupItem = require('react-bootstrap/lib/ListGroupItem')
var Grid          = require('react-bootstrap/lib/Grid')
var Row           = require('react-bootstrap/lib/Row')
var Col           = require('react-bootstrap/lib/Col')


//helpers
var _ 					= require('lodash')

//logging
var log       	= require('debug')('components:indicator:explore')

module.exports = React.createClass({

	propTypes : {
		flux: React.PropTypes.object,
    query: React.PropTypes.object,
		datasets: React.PropTypes.array,
		breakdowns: React.PropTypes.array,
	},

  render: function () {
		log('props', this.props)
    var self = this
    var flux = this.props.flux
    var query = this.props.query
    var breakdowns = this.props.breakdowns
    var first
    var second
    var third
    var displaySecond
    var displayThird
    first = (
      <ListGroup className='first dimension'>
        {
          _.map(this.props.breakdowns, function (breakdown) {
            var isActive = (breakdown.dimension === 1)
            return (
              <ListGroupItem href='#' active={isActive} onClick={self.handleDimensionClick(1, breakdown.id)}>{breakdown.title}</ListGroupItem>
            )
          })
        }
      </ListGroup>
    )

    if (this.props.query.d1) {
      displaySecond = true
      second = (
        <ListGroup className='second dimension'>
          {
            _(this.props.breakdowns)
            .filter(function (breakdown) {
              return breakdown.dimension !== 1
            })
            .map(function (breakdown) {
              var isActive = (breakdown.dimension === 2)
              return (
                <ListGroupItem href='#' active={isActive} onClick={self.handleDimensionClick(2, breakdown.id)}>{breakdown.title}</ListGroupItem>
              )
            })
            .value()
          }
        </ListGroup>
      )
    }
    else {
      second = (<div></div>)
    }


    if (this.props.query.d1 && this.props.query.d2) {
      displayThird = true
      third = (
        <ListGroup className='third dimension'>
          {
            _(this.props.breakdowns)
            .filter(function (breakdown) {
              return (breakdown.dimension !== 1 && breakdown.dimension !== 2)
            })
            .map(function (breakdown) {
              var isActive = (breakdown.dimension === 3)
              return (
                <ListGroupItem href='#' active={isActive} onClick={self.handleDimensionClick(3, breakdown.id)}>{breakdown.title}</ListGroupItem>
              )
            })
            .value()
          }
        </ListGroup>
      )
    }
    else {
      third = (<div></div>)
    }

    return (
      <Grid className='explore-data'>
        <Row className='header'>
          <h3>Explore data by</h3>
        </Row>
        <Row className='filters'>
          <Col className='first dimension' xs={4} md={3} >
            {first}
          </Col>
          <Col className={displaySecond ? 'and' : 'hide'} xs={3} md={1} >
            and
          </Col>
          <Col className={displaySecond ? 'second dimension' : 'hide'} xs={4} md={3} >
           {second}
          </Col>
          <Col className={displayThird ? 'and' : 'hide'} xs={3} md={1} >
            and
          </Col>
          <Col className={displayThird ? 'third dimension' : 'hide'} xs={4} md={3} >
           {third}
          </Col>
        </Row>

      </Grid>
    )

  },

  handleDimensionClick: function (dimensionIndex, breakdownId) {
    var self = this
    var dimension = 'd' + dimensionIndex
    return function (e) {
      e.preventDefault()
      self.props.flux.actions.indicator.selectFilter(dimension, breakdownId)
    }
  },

	handleDateSelect: function () {
		//TODO
	},

	handleFilterToggle: function (breakdownId) {
    var self = this
		return function () {
			self.props.flux.actions.indicator.toggleFilter(breakdownId)
		}
	},




})


//?d1=ethnicity&d2
