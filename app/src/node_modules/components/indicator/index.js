//main
var React       				= require('react')
var Fluxxor     				= require('fluxxor')

//components
var Table 							= require('react-simple-table')
var Snapshot 						= require('./snapshot')
var Timeline 						= require('./timeline')
var FluxMixin   				= Fluxxor.FluxMixin(React)

//modules
var joinData						= require('./join-data')
var getDatasets	= require('./get-datasets')

//helpers
// var keys 				= require('lodash.keys')
var capitalize 					= require('capitalize')
var extend 							= require('xtend')
var _ 									= require('lodash')

//logging
var log       					= require('debug')('src:components:indicator')

function findMatches (property, values) {
	return function (d) {
		return _.contains(values, d[property])
	}
}


module.exports = React.createClass({

	propTypes : {
		flux: React.PropTypes.object,
		params: React.PropTypes.object
	},

	getInitialState: function () {
		return {

		}
	},

  render: function () {
		log('props', this.props)
		var flux = this.props.flux
		var dataQuery = _.clone(this.props.query)
		var View
		var currentDatasetId
		var currentData

		//what is my indicator?
		var indicator = flux.stores.indicators.findOne({ slug: this.props.params.indicatorSlug })
		log('indicator', indicator)

		//configure dataQuery
		if (this.props.query.dataset === 'all') {
			delete dataQuery.dataset
		}
		else {
			currentDatasetId = this.props.query.dataset
		}
		dataQuery.indicator = indicator.id

		//what are my data?
		var data = flux.stores.data.query(dataQuery)
		log('data', data)

		//what datasets are available from these data?
    var sortedDatasets = getDatasets(data,flux)

		//set the default data
		if (!currentDatasetId) {
			currentDatasetId = sortedDatasets[0].id //set to dataset from the most recent year
			currentData = _.filter(data, function(d) {
				return d.data_set === currentDatasetId
			})
		}
		else {
			currentData = data
		}

		//what are my breakdowns?
		var breakdownIds = indicator.breakdowns.split(',')
		var breakdowns = flux.stores.dataBreakdowns.filter(findMatches('breakdowns', breakdownIds))


		if (this.props.query.dataset === 'all') {
			View = <Timeline>
		}
		else {
			View = <Snapshot data={currentData}>
		}


	
	[
		{}
	]

		return (
			<div className='indicator'>
				<h2>{indicator.title}</h2>
				<h3>[Placeholder]: Snapshot, Timeline</h3>
				{View}
			</div>
    )
		// Indicator Title
		// View Snapshot, Timeline

		//Year: (most recent Year)

		//breakdown 1: breakdown 2:... Order:


		// var columns = Object.keys(data[0]).map(function (key) { return capitalize(key) })
		//
    // return (
		// 	<div className='indicator'>
		// 		<h2>{indicator.title}</h2>
		// 		<Table className='indicator-table table' columns={columns} data={data}/>
		// 	</div>
    // )

  },

	renderSnapshot: function () {

	},

	renderTimeline: function () {

	}

})
