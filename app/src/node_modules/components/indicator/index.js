//main
var React       				= require('react')
var Fluxxor     				= require('fluxxor')

//components
var Table 							= require('react-simple-table')
var Snapshot 						= require('./snapshot')
var Timeline 						= require('./timeline')

//modules
var getDatasets					= require('./get-datasets')

//helpers
// var keys 				= require('lodash.keys')
var capitalize 					= require('capitalize')
var extend 							= require('xtend')
var _ 									= require('lodash')
var numeral							= require('numeral')
var d3InterpolateRGB		= require('d3-interpolate-rgb').interpolateRgb

//logging
var log       					= require('debug')('src:components:indicator')

function findMatches (property, values) {
	return function (d) {
		return _.contains(values, d[property])
	}
}


module.exports = React.createClass({

	propTypes : {
		flux: React.PropTypes.object,
		params: React.PropTypes.object
	},

	getInitialState: function () {
		return {
			cellOrder: { //NOTE hardcoded for now //these have an order assumption
				sex: 0,
				ethnicity: 1,
				age: 2,
				value: 3
			}
		}
	},

  render: function () {
		log('props', this.props)
		var flux = this.props.flux
		var dataQuery = _.clone(this.props.query)
		var indicator
		var data
		var sortedDatasets
		var options
		var currentData
		var tableData
		var breakdownIds
		var breakdowns
		var dataGroups
		var View
		var orderBool
		var dateOptions
		var maxValue = 0

		//what is my indicator?
		this.indicator = indicator = flux.stores.indicators.findOne({ slug: this.props.params.indicatorSlug })
		orderBool = (indicator.order === 'DESC')
		log('indicator', indicator)

		//get all the data for the indicator
		data = flux.stores.data.query({ indicator: indicator.id })
		log('data', data)

		//what datasets have these data?
		sortedDatasets = getDatasets(data,flux)
		log('sortedDatasets', sortedDatasets)
		//configure dataQuery defaults
		if (dataQuery.dataset === 'all') {
			delete dataQuery.dataset
		}
		else if (!dataQuery.dataset) {
			dataQuery.dataset = sortedDatasets[0].id
		}

		dateOptions = _.map(sortedDatasets, function (dataset) {
			return {
				value: String(dataset['observation_date']),
				label: 'Year: '+ dataset['observation_date']
			}
		})

		log('dataQuery', dataQuery)

		//filter an sort all data to those that match our params or defaults //TODO do this on the store?
		currentData = _(data)
			.filter(dataQuery)
			.reject({ value: '' })
			.each(function (d) {
				if (d.value > maxValue) maxValue = d.value
				return d
			})
			.sortByOrder('value', orderBool)
			.value()

		//what are my breakdowns?
		breakdownIds = indicator.breakdowns.split(',')
		//TEMP sort, put order in the data
		breakdowns = flux.stores.dataBreakdowns.filter(findMatches('id', breakdownIds)).sort(function (a, b) {
			return this.state.cellOrder[a.id] - this.state.cellOrder[b.id]
		}.bind(this))


		dataGroups = flux.stores.dataGroups.filter(findMatches('breakdown', breakdownIds))
		log('dataGroups', dataGroups, maxValue)

		tableData = this.formatTableData(currentData, dataGroups, maxValue)



		//set the View and load up with its data
		if (this.props.query.dataset === 'all') {
			View = <Timeline/> //TODO
		}
		else {
			View = (
				<Snapshot
					flux={flux}
					params={this.props.params}
					data={tableData}
					breakdowns={breakdowns}
					indicator={indicator}
					options={dateOptions}/>
			)
		}

		return (
			<div className='indicator'>
				<h2>{indicator.title}</h2>
				<h3>[Placeholder]: Snapshot, Timeline</h3>
				{View}
			</div>
    )
  },

	//data: Collection: -> [Row:[{Cell}, {Cell}...],Row:[{Cell}, {Cell}...]...]
	formatTableData: function (data, dataGroups, maxValue) {
		log('data', data)
		return _.map(data, function (d) {
			log('d', d, this.state.cellOrder)
			var rowData = []
			_.each(d, function (val, key) {
				log('val, key', val, key)
				if (typeof this.state.cellOrder[key] === 'number') { //check for breakdown existance (0 === 'falsy')
					if (key !== 'value') {
						var cellData = {} // { label: 'string', value: 'Number', type: 'string', onclick: 'function'}
						var dataGroup = _.find(dataGroups, { breakdown: key, short: val })
						log('val, key', val, key, dataGroup)
						cellData.label = dataGroup ? dataGroup.title : val
						rowData[this.state.cellOrder[key]]  = cellData
					}
					else {
						rowData[this.state.cellOrder[key]]  = this.formatBarCell(val, maxValue)
					}

				}
			}.bind(this))
			return rowData
		}.bind(this))
	},

	formatBarCell: function (val, maxValue, indicator) {
		var label = (this.indicator.unit === '%') ? numeral(val).format('0.0%') : label
		var color = this.color()(val/maxValue)
		return {
			type: 'horizontal-bar',
			value: Math.round((val/maxValue)*100, 2),
			label: label,
			color: color
		}
	},

	color: function () {
		return d3InterpolateRGB('blue', 'red')
	}



})
