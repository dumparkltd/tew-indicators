//main
var React       				= require('react')
var Fluxxor     				= require('fluxxor')

//components
var Table 							= require('react-simple-table')
var Snapshot 						= require('./snapshot')
var Timeline 						= require('./timeline')

//modules
var joinData						= require('./join-data')
var getDatasets	= require('./get-datasets')

//helpers
// var keys 				= require('lodash.keys')
var capitalize 					= require('capitalize')
var extend 							= require('xtend')
var _ 									= require('lodash')

//logging
var log       					= require('debug')('src:components:indicator')

function findMatches (property, values) {
	return function (d) {
		return _.contains(values, d[property])
	}
}


module.exports = React.createClass({

	propTypes : {
		flux: React.PropTypes.object,
		params: React.PropTypes.object
	},

  render: function () {
		log('props', this.props)
		var flux = this.props.flux
		var dataQuery = _.clone(this.props.query)
		var indicator
		var data
		var sortedDatasets
		var options
		var currentData
		var breakdownIds
		var breakdowns
		var View

		//what is my indicator?
		indicator = flux.stores.indicators.findOne({ slug: this.props.params.indicatorSlug })
		log('indicator', indicator)

		//get all the data for the indicator
		data = flux.stores.data.query({ indicator: indicator.id })
		log('data', data)

		//what datasets have these data?
		sortedDatasets = getDatasets(data,flux)

		//configure dataQuery defaults
		if (dataQuery.dataset === 'all') {
			delete dataQuery.dataset
		}
		else if (!dataQuery.dataset) {
			dataQuery.dataset = sortedDatasets[0].id
		}

		//filter all data to those that match our params or defaults
		currentData = _.filter(data, dataQuery)

		//what are my breakdowns?
		breakdownIds = indicator.breakdowns.split(',')
		breakdowns = flux.stores.dataBreakdowns.filter(findMatches('id', breakdownIds))
		log('breakdowns', breakdowns, currentData)

		//set the View and load up with its data
		if (this.props.query.dataset === 'all') {
			View = <Timeline/> //TODO
		}
		else {
			View = <Snapshot params={this.props.params} data={currentData} breakdowns={breakdowns} datasets={sortedDatasets} />
		}

		return (
			<div className='indicator'>
				<h2>{indicator.title}</h2>
				<h3>[Placeholder]: Snapshot, Timeline</h3>
				{View}
			</div>
    )
		// Indicator Title
		// View Snapshot, Timeline

		//Year: (most recent Year)


  },
})
