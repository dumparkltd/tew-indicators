//main
var React       = require('react')

//components
var Select      	= require('react-select')
var Button 				= require('react-bootstrap/lib/Button')
var ButtonToolbar	= require('react-bootstrap/lib/ButtonToolbar')
var ButtonGroup 	= require('react-bootstrap/lib/ButtonGroup')
var ListGroup     = require('react-bootstrap/lib/ListGroup')
var ListGroupItem = require('react-bootstrap/lib/ListGroupItem')
var Grid          = require('react-bootstrap/lib/Grid')
var Row           = require('react-bootstrap/lib/Row')
var Col           = require('react-bootstrap/lib/Col')


//helpers
var _ 					= require('lodash')
var isArray     = require('isarray')

//logging
var log       	= require('debug')('components:indicator:filters')

module.exports = React.createClass({

	propTypes : {
		flux: React.PropTypes.object,
    query: React.PropTypes.object,
		dataGroupMatrix: React.PropTypes.array,
		breakdowns: React.PropTypes.array,
	},

  render: function () {
		log('props', this.props)
    var self = this
    var flux = this.props.flux
		var query = this.props.query
		var footnote

		if ('ethnicity' === query.d1 || 'ethnicity' === query.d2 || 'ethnicity' ===  query.d3) {
			footnote = this.renderFootnote()
		} else { footnote = (<div></div>) }

    return (
      <div>
        <Row className='filters-header' style={{ paddingLeft: 0 }}>
          Filter By
        </Row>
					{
						_.map(this.props.dataGroupMatrix, function (dataGroups, i) {
							return this.renderFilterGroup(dataGroups, this.props.breakdowns[i])
						}, this)
					}
				<Row>
				 	{ footnote }
				</Row>
      </div>
    )

  },

  renderFilterGroup: function (dataGroups, breakdown) {
    log('dataGroups', dataGroups)
    log('breakdown', breakdown)
		var order = { 'age': false, }
    return (
      <Row style={{ marginLeft: -29 }}>
				<Col md={3} >
	        <p>{breakdown.title}</p>
	        <ButtonGroup vertical style={{ paddingLeft: 0 }}>
		        {
		          _(dataGroups)
		            .filter(function (dataGroup) {
		              return dataGroup.breakdown === breakdown.id && !_.contains(['all', 'other', 'unknown'], dataGroup.short)
		            }, this)
								.sortBy('title')
		            .map(function (dataGroup) {
		              var queryField = this.props.query[dataGroup.breakdown]
		              var isActive = queryField && (isArray(queryField) && _.contains(queryField, dataGroup.short) || queryField === dataGroup.short)
		              log('queryField', queryField)
									log('isActive', isActive)
									return (
		                <li style={{ listStyleType: 'none' }}>
		                  <Button
												style={{marginTop: 5 }}
		                    active={isActive}
		                    bsSize='small'
		                    onClick={this.handleFilterClick(dataGroup.breakdown, dataGroup.short)}>
		                    {dataGroup.title}
		                  </Button>
		                </li>
		              )
		            }, this)
		            .value()
		        }
	        </ButtonGroup>
				</Col>
				<Col md={2} >
					<p onClick={this.handleClearAll(breakdown.id)} style={{ cursor: 'pointer' }}>Clear all</p>
				</Col>
      </Row>
    )
  },

	renderFootnote: function () {
		return (
		<p>{'*MELAA: Middle Eastern / Latin American / African'}</p>
		)
	},

	// getFilterTitle: function (dataGroup) {
	//
	// },

	handleClearAll: function (field) {
		var self = this
		return function (e) {
			self.props.flux.actions.indicator.selectFilter(field, null)
		}
	},

  handleFilterClick: function (field, value) {
		log('handleFilterClick', field, value)
    var self = this
    return function (e) {
      e.preventDefault()
      self.props.flux.actions.indicator.toggleFilter(field, value)
    }
  }
})
