//main
var React       = require('react')

//components
var Select      	= require('react-select')
var Button 				= require('react-bootstrap/lib/Button')
var ButtonToolbar	= require('react-bootstrap/lib/ButtonToolbar')
var ListGroup     = require('react-bootstrap/lib/ListGroup')
var ListGroupItem = require('react-bootstrap/lib/ListGroupItem')
var Grid          = require('react-bootstrap/lib/Grid')
var Row           = require('react-bootstrap/lib/Row')
var Col           = require('react-bootstrap/lib/Col')


//helpers
var _ 					= require('lodash')
var isArray     = require('isarray')

//logging
var log       	= require('debug')('components:indicator:filters')

module.exports = React.createClass({

	propTypes : {
		flux: React.PropTypes.object,
    query: React.PropTypes.object,
		dataGroups: React.PropTypes.array,
    breakdowns: React.PropTypes.array
	},

  render: function () {
		log('props', this.props)
    var self = this
    var flux = this.props.flux
    var first
    var second
    var third
    var displaySecond
    var displayThird
    var d1Filters

    if (this.props.query.d1 && this.props.breakdowns[0]) {
      first = this.renderFilterGroup(this.props.dataGroups, this.props.breakdowns[0])
    } else { first = (<div></div>) }

    if (this.props.query.d2 && this.props.breakdowns[1]) {
      second = this.renderFilterGroup(this.props.dataGroups, this.props.breakdowns[1])
    } else { second = (<div></div>) }

    if (this.props.query.d3 && this.props.breakdowns[2]) {
      third = this.renderFilterGroup(this.props.dataGroups, this.props.breakdowns[2])
    } else { third = (<div></div>) }

    return (
      <div>
        <Row className='filters-header'>
          Filter By
        </Row>
        { first }
        { second }
        { third }
      </div>
    )

  },

  renderFilterGroup: function (dataGroups, breakdown) {
    log('dataGroups', dataGroups)
    log('breakdown', breakdown)
    return (
      <Row>
        <p>{breakdown.title}</p>
        <ul>
        {
          _(dataGroups)
            .filter(function (dataGroup) {
              return dataGroup.breakdown === breakdown.id && dataGroup.short !== 'all'
            }, this)
            .map(function (dataGroup) {
              var queryField = this.props.query[dataGroup.breakdown]
              var isActive = queryField && (isArray(queryField) && _.contains(queryField, dataGroup.short) || queryField === dataGroup.short)
              return (
                <li style={{ listStyleType: 'none' }}>
                  <Button
                    active={isActive}
                    bsSize='small'
                    onClick={this.handleFilterClick(dataGroup.breakdown, dataGroup.short)}>
                    {dataGroup.title}
                  </Button>
                </li>
              )
            }, this)
            .value()
        }
        </ul>
      </Row>
    )
  },

  handleFilterClick: function (field, value) {
    var self = this
    return function (e) {
      e.preventDefault()
      self.props.flux.actions.indicator.toggleFilter(field, value)
    }
  }
})
