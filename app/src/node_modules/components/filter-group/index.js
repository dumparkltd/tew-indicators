var React       = require('react')
var Fluxxor     = require('fluxxor')
var FluxMixin   = Fluxxor.FluxMixin(React)
var Select      = require('react-select')

var log       = require('debug')('src:components:filter-group:index')

module.exports = React.createClass({

  propTypes: {
    flux: React.PropTypes.func.isRequired,
    groupType: React.PropTypes.string.isRequired
  },

  mixins: [
    FluxMixin
  ],

  render: function () {
    var groupType = this.props.groupType
    var params  = this.getFlux().stores.route.getCurrentParams() //not used
    var query   = this.getFlux().stores.route.getCurrentQuery()
    //on render fetch latest data
    var data    = this.getFlux().stores[groupType].query(params)
    log('data', data)
    log('params', params)
    log('props', this.props)
    log('context', this.context)

    var value = query[groupType] || null

    var options = data.map(function (d) {
      return {
        value: d.id,
        label: d.label
      }
    })    

    return (
      <div>
        <Select
          name={'select-'+groupType}
          // multi-select disabled for time being
          // multi={true}
          value={value}
          options={options}
          onChange={this.handleOnChange} />
      </div>

    )

  },

  handleOnChange: function (val) {
    var currentQuery    = this.getFlux().stores.route.getCurrentQuery()
    var selectedValues  = (val.indexOf(',') !== -1) ? val.split(',') : [val]
    var groupType       = this.props.groupType

    //TODO more generic/decoupled in action call? 
    this.getFlux().actions.group.selectChange(groupType, selectedValues, currentQuery)
  }
})