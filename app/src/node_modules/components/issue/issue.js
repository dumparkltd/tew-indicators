var React           = require('react')
var Fluxxor         = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

//components
var NavPrimary      = require('components/nav-primary')
var Load            = require('components/load')
var IssueMain       = require('./issue-main')
var Indicators      = require('./indicators')
var Recommendations = require('./recommendations')

//bootstrap
var Grid 				= require('react-bootstrap/lib/Grid')


//helpers

var _               = require('lodash')

// var log       = require('debug')('src:components:issue')

module.exports = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('issues', 'indicators','data')
  ],

  getStateFromFlux: function () {
    var flux = this.props.flux
    return {
      issuesLoading: flux.store('issues').isLoading(),
      indicatorsLoading : flux.store("indicators").isLoading(),
      recsLoading : flux.store("recommendations").isLoading(),
      dataLoading : flux.store("data").isLoading(),
    }
  },

  render: function () {
//    log('props, state', this.props, this.state)
    var flux = this.props.flux
    
    if (this.state.issuesLoading 
            || this.state.indicatorsLoading 
            || this.state.recsLoading 
            || this.state.dataLoading) {
      return (
        <Load/>          
      )
    }
    else {
      return (
        <div className="page-wrapper page-wrapper-issue">      
          <NavPrimary
            flux = {flux}
            type = 'issue'
            items = {
              _.map(flux.stores.issues.data,function(item){
                return _.assign({},item,{
                  active : flux.stores.routes.getCurrentParams().issueSlug === item.slug,
                  subtitle : (this.state.indicatorsLoading) ? '' : flux.stores.indicators.query({ issue: item.id }).length + ' Indicators'
                })
              },this)
            }
            />
          <div className="page-content-issue page-content">
            <Grid className='page-section issue-section-analysis'>
              { this.renderIssueMain() }
            </Grid>
            <Grid className='page-section issue-section-indicators'>
              { this.renderIndicators() }
            </Grid>
            <Grid className='page-section issue-section-recommendations'>  
              { this.renderRecommendations() }
            </Grid>
          </div>
        </div>
      )
      }
  },
  renderIssueMain : function (){
    var flux = this.getFlux()

    var issue = flux.stores.issues.findOne({ slug: this.props.params.issueSlug })

    return (
      <IssueMain
        id          = {issue.id}
        title       = {issue.title}
        commentary  = {issue.commentary}
        about       = {issue.about}
      />
    )
  },
  renderIndicators : function (){
    var flux = this.getFlux()

    var issue = flux.stores.issues.findOne({ slug: this.props.params.issueSlug })
    var indicators = flux.stores.indicators.query({ issue: issue.id })

    return (
      <Indicators
        flux = {flux}
        indicators = {indicators}
        cols = {3}
      />
    )
  },
  renderRecommendations : function (){
    var flux = this.getFlux()

    var issue = flux.stores.issues.findOne({ slug: this.props.params.issueSlug })
    var recs = flux.stores.recommendations.query({ issue: issue.id })

    return (
      <Recommendations
        recommendations = {recs}
      />
    )
  }

})
