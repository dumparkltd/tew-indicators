var React           = require('react')
var Fluxxor         = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

//components
var NavPrimary      = require('components/nav-primary') 
var Load            = require('components/load') 
var IssueMain       = require('./issue-main') 
var Indicators      = require('./indicators') 

//helpers

var _               = require('lodash')
var capitalize      = require('capitalize')

var log       = require('debug')('src:components:issue')

module.exports = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('issues', 'indicators','data')    
  ],

  getStateFromFlux: function () {
    var flux = this.props.flux
    return {
      issuesLoading: flux.store('issues').isLoading(),
      indicatorsLoading : flux.store("indicators").isLoading(),
      dataLoading : flux.store("data").isLoading(),
    }
  },

  render: function () {
    log('props, state', this.props, this.state)
    var flux = this.props.flux

    return (
      <div>
        <NavPrimary 
          flux = {flux}
          label = { {top:'Select',bottom:'Issue'} }
          type = 'issue'
          items = { 
            _.map(flux.stores.issues.data,function(item){
              return _.assign({},item,{
                active : flux.stores.routes.getCurrentParams().issueSlug === item.slug,                
                subtitle : (this.state.indicatorsLoading) ? '' : flux.stores.indicators.query({ issue: item.id }).length + ' Indicators'
              })               
            },this)
          } 
        />
        { this.renderIssueMain() }
        { this.renderIndicators() }
      </div>
    )
  },
  renderIssueMain : function (){    
    var flux = this.getFlux()
    
    if (this.state.issuesLoading) {
      return  (
        <Load />
      )
    } else {
      var issue = flux.stores.issues.findOne({ slug: this.props.params.issueSlug })
    
      return (
        <IssueMain
          title       = {issue.title}
          commentary  = {issue.commentary}
          about       = {issue.about}
        />
      )
    }
  },
  renderIndicators : function (){    
    var flux = this.getFlux()
    
    if (this.state.issuesLoading || 
        this.state.indicatorsLoading ||
        this.state.dataLoading ) {
      return  (
        <Load />
      )
    } else {
      var issue = flux.stores.issues.findOne({ slug: this.props.params.issueSlug })      
      var indicators = flux.stores.indicators.query({ issue: issue.id })
    
      return (
        <Indicators
          flux = {flux}
          indicators = {indicators}
        />
      )
    }
  }

})
