var React         = require('react')
var Fluxxor       = require('fluxxor')
var FluxMixin     = Fluxxor.FluxMixin(React)
var Router        = require('react-router')

var RouteHandler  = Router.RouteHandler

//helpers
var pluck         = require('lodash.pluck')
var where         = require('lodash.where')
var find          = require('lodash.find')
var result        = require('lodash.result')
var capitalize    = require('capitalize')

var log       = require('debug')('src:components:issue')

module.exports = React.createClass({

  propTypes: {
    flux: React.PropTypes.object
  },

  getInitialState: function () {
    var flux = this.props.flux
    var router = flux.stores.routes
    var issueSlug = router.getCurrentRoute().substring(1)
    log('issueSlug', issueSlug, this.props)
    var issueData = flux.stores.issues.query({ slug: issueSlug })[0]
    log('issueData', issueData)
    var indicators = flux.stores.indicators.query({ issue: issueData.id })
    log('indicator', indicators)

    return {
      issueData: issueData,
      indicators: indicators,
      issueSlug: issueSlug
    }
  },

  render: function () {
    var flux = this.props.flux

    return (
      <div className='issue'>
        <h3>Issue</h3>
        <h2>{this.state.issueData.title}</h2>
        <p>{this.state.issueData.commentary}</p>
          {this.state.indicators.map(function (indicator) {

            log('indicator', indicator)

            return (
              <button onClick={this.handleIndicatorClick(indicator.slug)}>{indicator.title}</button>
            )
          }.bind(this))}
      </div>
    )
  },

  handleIndicatorClick: function (indicatorSlug) {
    var router = this.props.flux.stores.routes
    return function (e) {
      var params = {
        indicatorSlug: indicatorSlug,
        issueSlug: this.state.issueSlug
      }

      router.handleIndicatorTransition({ params: params })
    }.bind(this)
  }
})
