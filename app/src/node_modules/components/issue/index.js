var React         = require('react')
var Fluxxor       = require('fluxxor')
var FluxMixin     = Fluxxor.FluxMixin(React)
var Router        = require('react-router')

var RouteHandler  = Router.RouteHandler

//helpers
var pluck         = require('lodash.pluck')
var where         = require('lodash.where')
var find          = require('lodash.find')
var result        = require('lodash.result')
var capitalize    = require('capitalize')

var log       = require('debug')('src:components:issue')

function routeToTitle (route) {
  var regexp = /-/g
  return capitalize.words(route.substring(1).replace(regexp, ' '))
}

function titleToRoute (title) {
  var regexp = / /g
  return title.replace(regexp, '-').toLowerCase()
}


module.exports = React.createClass({

  propTypes: {
    flux: React.PropTypes.object
  },

  getInitialState: function () {
    var flux = this.props.flux
    var router = flux.stores.routes
    var issueRoute = router.getCurrentRoute()
    var issueName = routeToTitle(issueRoute)

    log('issueName', issueName)

    var issueData = flux.stores.issues.query({ title: issueName })[0]
    log('issueData', issueData)
    var indicators = flux.stores.indicators.query({ issue: issueData.id })
    log('indicator', indicators)

    return {
      issueData: issueData,
      indicators: indicators,
      issueName: issueName,
      issueRoute: issueRoute
    }
  },

  render: function () {

    return (
      <div className='issue'>
        <h3>Issue</h3>
        <h2>{this.state.issueName}</h2>
        <p>{this.state.issueData.commentary}</p>
          {this.state.indicators.map(function (indicator) {
            var indicatorRoute = titleToRoute(indicator.title)
            log('indicatorRoute', indicatorRoute)

            return (
              <button onClick={this.handleIndicatorClick(indicatorRoute)}>{indicator.title}</button>
            )
          }.bind(this))}
      </div>
    )
  },

  componentWillReceiveProps: function (nextProps) {
    var flux = nextProps.flux
    var router = flux.stores.routes
    var issueName = capitalize(router.getCurrentRoute().substring(1))

    var issueData = flux.stores.issues.query({ title: issueName })[0]
    log('issueData', issueData)
    var indicators = flux.stores.indicators.query({ issue: issueData.id })

    this.setState({
      isssueRoute: issueRoute,
      issueData: issueData,
      indicators: indicators,
      issueName: issueName
    })

  },

  handleIndicatorClick: function (indicatorRoute) {
    var router = this.props.flux.stores.routes
    return function (e) {
      var pathName = [this.state.issueRoute, 'indicators', indicatorRoute].join('/')

      log('navigate to indicator', pathName)
      router.handlePathTransition(pathName)
      router.handleIndicatorTransition({issueRoute: this.state.issueRoute, indicatorRoute: indicatorRoute })
    }.bind(this)
  }
})
