var React         = require('react')
var Fluxxor       = require('fluxxor')
var FluxMixin     = Fluxxor.FluxMixin(React)
var Router        = require('react-router')

var RouteHandler  = Router.RouteHandler

//helpers
var pluck         = require('lodash.pluck')
var where         = require('lodash.where')
var find          = require('lodash.find')
var result        = require('lodash.result')
var capitalize    = require('capitalize')

var log       = require('debug')('src:components:issue')

function routeToTitle (route) {
  var regexp = /-/g
  return capitalize.words(route.substring(1).replace(regexp, ' '))
}

function titleToRoute (title) {
  var regexp = / /g
  return title.split(regexp).slice(0, 5).join('-').toLowerCase()
}


module.exports = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
  ],

  contextTypes: {
    router: React.PropTypes.func
  },

  propTypes: {
    flux: React.PropTypes.object
  },
  
  componentWillReceiveProps: function(nextProps) {
    this.setState(this.getStateFromFlux());
  },

  getStateFromFlux: function() {
    var params = this.context.router.getCurrentParams();

    return {
      params: params
    };
  },

//  getInitialState: function () {
//    var flux = this.props.flux
//    var router = flux.stores.routes
//    var issueRoute = router.getCurrentRoute()
//    var issueName = routeToTitle(issueRoute)
//
//    log('issueName', issueName)
//
//    var issueData = flux.stores.issues.query({ title: issueName })[0]
//    log('issueData', issueData)
//    var indicators = flux.stores.indicators.query({ issue: issueData.id })
//    log('indicator', indicators)
//
//    return {
//      issueData: issueData,
//      indicators: indicators,
//      issueName: issueName,
//      issueRoute: issueRoute
//    }
//  },

  render: function () {

    return (
      <div className='issue'>
        <h3>Issue</h3>        
      </div>
    )
  },

//  componentWillReceiveProps: function (nextProps) {
//    var flux = nextProps.flux
//    var router = flux.stores.routes
//    var issueName = capitalize(router.getCurrentRoute().substring(1))
//
//    var issueData = flux.stores.issues.query({ title: issueName })[0]
//    log('issueData', issueData)
//    var indicators = flux.stores.indicators.query({ issue: issueData.id })
//
//    this.setState({
//      issueRoute: issueRoute,
//      issueData: issueData,
//      indicators: indicators,
//      issueName: issueName
//    })
//
//  },
//
//  handleIndicatorClick: function (indicatorRoute) {
//    var router = this.props.flux.stores.routes
//    return function (e) {
//      var params = {
//        indicatorRoute: indicatorRoute,
//        issueRoute: this.state.issueRoute
//      }
//
//      router.handleIndicatorTransition({ params: params })
//    }.bind(this)
//  }
})
