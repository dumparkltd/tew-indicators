var React           = require('react')
var _               = require('lodash')


var IndicatorPreview 				= require('./indicator-preview')

var Grid 				= require('react-bootstrap/lib/Grid')
var Row 				= require('react-bootstrap/lib/Row')

var makeGroupLabel = require('utils/makeGroupLabel')
var makeDataLabel = require('utils/makeDataLabel')

var log       = require('debug')('src:components:issue:indicators')


module.exports = React.createClass({

  render: function () {
    var indicators = this.props.indicators     
    
    return (
      <Grid>
        {
          _.map(_.chunk(indicators,this.props.cols), function(chunk){
            return this.renderRow(chunk)
          },this) 
        }
      </Grid>
    )
  },
  renderRow : function(indicators) {
    var data = this.props.flux.stores.data
    var datasets = this.props.flux.stores.datasets //.query({ indicator: indicator.id })}       
    return (
      <Row>      
        {
            _.map(indicators, function (indicator,index) {   
              log('indicator ',indicator)
              var dataByIndicator = data.query({indicator:indicator.id})
              var current = datasets.getYoungest(_(dataByIndicator).pluck('dataset').uniq().value())
              var dataCurrent = _(dataByIndicator).where({dataset:current.id}).reject({ value: '' }).value()

              return (
                  <IndicatorPreview
                    flux  = {this.props.flux}
                    cols  = {this.props.cols}
                    title = {indicator.title}
                    slug  = {indicator.slug}
                    type  = {(indicator.datatype === 'categorical') ? 'categorical' : 'range'}
                    data  = {this.preparePreviewData(dataCurrent,indicator)}
                  />
              )              
            },this)
        }        
      </Row>
    )
  },
  
  preparePreviewData : function(data,indicator){
    if (indicator.type === 'categorical') {
            //categorical
      return data;
    } else {
      var breakdowns = indicator.breakdowns.split(',')       
      data = 
        _(data)
          .reject(function(d){
            var all = true
            _.each(breakdowns, function(bd){
              if (d[bd] !== 'all') {
                all = false
              }
            })
            return all
          })
          .sortByOrder(['value'],[indicator.order === 'DESC']).value()
      var top = _.first(data)
      var bottom = _.last(data)
      
      var previewData = {
        top : {
          group : makeGroupLabel(this.props.flux,breakdowns,top),
          value : makeDataLabel(top.value,indicator.datatype,indicator.unit)
        },
        bottom : {
          group : makeGroupLabel(this.props.flux,breakdowns,bottom),
          value : makeDataLabel(bottom.value,indicator.datatype,indicator.unit)
        },
      }
      log('previewData ' , previewData)
      return previewData
    }                         
  }
})
