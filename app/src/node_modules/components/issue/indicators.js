var React           = require('react')
var _               = require('lodash')


var IndicatorPreview 				= require('./indicator-preview')

var Grid 				= require('react-bootstrap/lib/Grid')
var Row 				= require('react-bootstrap/lib/Row')

var makeGroupLabel = require('utils/makeGroupLabel')

var log       = require('debug')('src:components:issue:indicators')


module.exports = React.createClass({

  render: function () {
    var indicators = this.props.indicators
    var data = this.props.flux.stores.data
    var datasets = this.props.flux.stores.datasets //.query({ indicator: indicator.id })}        
    
    return (
      <Grid>      
        <Row>      
          {
              _.map(indicators, function (indicator) {   
                log('indicator ',indicator)
                var dataByIndicator = data.query({indicator:indicator.id})
                var current = datasets.getYoungest(_(dataByIndicator).pluck('dataset').uniq().value())
                var dataCurrent = _(dataByIndicator).where({dataset:current.id}).reject({ value: '' }).value()
                                
                return (
                    <IndicatorPreview
                      flux  = {this.props.flux}
                      title = {indicator.title}
                      slug  = {indicator.slug}
                      type  = {(indicator.datatype === 'categorical') ? 'categorical' : 'range'}
                      data  = {this.preparePreviewData(dataCurrent,indicator)}
                    />
                )              
              },this)
          }        
        </Row>
      </Grid>
    )
  },
  
  preparePreviewData : function(data,indicator){
    if (indicator.type === 'categorical') {
            //categorical
      return data;
    } else {
      data = _(data).sortByOrder(['value'],[indicator.order === 'DESC']).value()
      var top = _.first(data)
      var bottom = _.last(data)
      var breakdowns = indicator.breakdowns.split(',') 
      
      var previewData = {
        top : {
          group : makeGroupLabel(this.props.flux,top),
          value : top.value
        },
        bottom : {
          group : makeGroupLabel(this.props.flux,bottom),
          value : bottom.value
        },
      }
      log('previewData ' , previewData)
      return previewData
    }                         
  }
})
