var React           = require('react')
var _               = require('lodash')


var IndicatorPreview 				= require('./indicator-preview')

var Grid 				= require('react-bootstrap/lib/Grid')
var Row 				= require('react-bootstrap/lib/Row')

var makeGroupLabel = require('utils/makeGroupLabel')
var makeDataLabel = require('utils/makeDataLabel')
var getRange   = require('utils/getRange')
var getReference   = require('utils/getReference')
var getDataColor   = require('utils/getDataColor')
var getDatasets = require('utils/get-datasets')

var log       = require('debug')('src:components:issue:indicators')


module.exports = React.createClass({

  render: function () {
    var indicators = this.props.indicators

    return (
      <div>
        <h2 >Indicators</h2>
        {
          _.map(_.chunk(indicators,this.props.cols), function(chunk, index){
            return this.renderRow(chunk, index)
          },this)
        }
      </div>
    )
  },
  renderRow : function(indicators, index) {
    var data = this.props.flux.stores.data
    var datasets = this.props.flux.stores.datasets //.query({ indicator: indicator.id })}


    return (
      <Row key={'issue-indicators-'+index}>
        {
            _.map(indicators, function (indicator) {
              log('indicator ',indicator)
              var dataByIndicator = data.query({indicator:indicator.id})
              var current = datasets.getYoungest(_(dataByIndicator).pluck('dataset').uniq().value())
              var dataCurrent = _(dataByIndicator).where({dataset:current.id}).reject({ value: '' }).value()

              var previewType = 'none'
              var total = 0

              if (indicator.datatype === 'percentage'
                || indicator.datatype === 'median'
                || indicator.datatype === 'disfactor'
                || (indicator.datatype === 'part-to-whole' && indicator.breakdowns.split(',').length === 1)
              ) {
                 previewType = 'range'
              }
              else if (indicator.datatype === 'absolute'
                      || (indicator.datatype === 'categorical' && indicator.multidimensional === 'n')) {
                previewType = 'totals'

                total = this.computeTotal(dataCurrent,indicator)

              } else {
                previewType = 'custom'
              }

              return (
                  <IndicatorPreview
                    key   = {indicator.id}
                    flux  = {this.props.flux}
                    cols  = {this.props.cols}
                    title = {indicator.title}
                    slug  = {indicator.slug}
                    type  = {previewType}
                    total  = {total}
                    date = {current.observationdate.getFullYear()}
                    previewfact = {indicator.previewfact}
                    data  = {this.preparePreviewData(dataCurrent,indicator)}
                    showLinechartIcon = {this.hasMultipleDatasets(dataByIndicator) && indicator.datatype !== 'categorical'}
                  />
              )
            },this)
        }
      </Row>
    )
  },
  computeTotal : function(data,indicator){
    // get all people total from database
    if (indicator.datatype === 'absolute'){
      var breakdowns = indicator.breakdowns.split(',') // warning all available breakdowns not the ordered breakdowns
      // filter data by "all" for all breakdowns
      var ref = _.findWhere(
        data,
        _.zipObject(breakdowns,_.fill(Array(breakdowns.length), 'all'))
      )
      return typeof ref !== 'undefined' ? ref.value : 0
    } else if (indicator.datatype === 'categorical'){
        var total = 0
         _.each(data[0].value.split(','),function(value){
          total += parseInt(value)
        })

        return total
    }
  },
  preparePreviewData : function(data,indicator){

      var breakdowns = indicator.breakdowns.split(',')
      breakdowns = breakdowns[0] === '' ? [] : breakdowns
      var range = getRange(data,indicator)

      var previewData = {
        top : {
          group : makeGroupLabel(this.props.flux,breakdowns,range.top),
          valueLabel : makeDataLabel(range.top.value,indicator.datatype,indicator.unit),
          length : indicator.unit === '%' ? range.top.value*100 :
                  range.top.value > range.bottom.value ? 100 : range.top.value/range.bottom.value*100,
          color: getDataColor(true)
        },
        bottom : {
          group : makeGroupLabel(this.props.flux,breakdowns,range.bottom),
          valueLabel : makeDataLabel(range.bottom.value,indicator.datatype,indicator.unit),
          length : indicator.unit === '%' ? range.bottom.value*100 :
                  range.top.value < range.bottom.value ? 100 : range.bottom.value/range.top.value*100,
          color: getDataColor(false)
        },
      }
      var reference = getReference(data,indicator)

      if (typeof reference.value !== 'undefined') {
        previewData.ref = {
          group : reference.label,
          valueLabel : makeDataLabel(reference.value,indicator.datatype,indicator.unit,true,true),
          length : indicator.unit === '%' ? reference.value*100 :
                  range.top.value > range.bottom.value ? reference.value/range.top.value*100 : reference.value/range.bottom.value*100

        }
      }

      log('previewData ' , previewData)
      return previewData
  },

  hasMultipleDatasets: function (data) {
    return getDatasets(data, this.props.flux).length > 1    
  }

})
