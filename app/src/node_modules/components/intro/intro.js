var React         = require('react')
var Fluxxor       = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

//helpers
var _         = require('lodash')

var Grid 				= require('react-bootstrap/lib/Grid')
var Row 				= require('react-bootstrap/lib/Row')
var Col 				= require('react-bootstrap/lib/Col')

var log       = require('debug')('src:components:intro')

module.exports = React.createClass({

  propTypes: {
    flux: React.PropTypes.object,
  },

  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('issues','indicators')
  ],

  getStateFromFlux: function () {
    var flux = this.props.flux
    return {
      issuesLoading: flux.store('issues').isLoading(),
      indicatorsLoading: flux.store('indicators').isLoading()
    }
  },

  render: function () {

    log('props, state', this.props, this.state)
    var flux = this.getFlux()
    var IssueSelectView
    var items

    if (this.state.issuesLoading) {
      IssueSelectView = <p>Loading...</p>
    }
    else {
      items = _.map(flux.stores.issues.data,function(item){
        return _.assign({},item,{
          subtitle : (this.state.indicatorsLoading) ? '' : flux.stores.indicators.query({ issue: item.id }).length + ' Indicators'
        })
      }, this)

      log ('items',items)

      IssueSelectView = (
        <ul className="list-inline intro-ul">
          {
            _.map(items, function (item, i, items) {
              var width = 1/items.length * 100 + '%'
              var className = 'nav-primary-li intro-li'
              if (i === items.length-1) className += ' last'
              return (
                <li className={className}  style={{width:width}}>
                  <a
                    className='btn'
                    href='#'
                    onClick={this.handleIssueClick(item.slug)}>
                    <span className={'icon-'+ item.slug}></span>
                    <div className='title'>{item.title}</div>
                    <div>{item.subtitle}</div>
                  </a>
                </li>
              )
            },this)
          }
        </ul>
      )
    }

    return (
      <div className='intro text-center'>
        <Grid>
          <Row className="intro-text">
            <Col md={8} mdPush={2}>
              <h1 className='intro-serif'> Tracking Equality at Work is an evidential base for montoring fairness at work</h1>
              <p className='intro-lead intro-serif'>
                It is a human right to be treated fairly at every point of the employment process
                whether it is getting a job, fair pay, or promotion pathways. Like schools, homes and the
                community, workplaces are environments in which human rights must live.
              </p>
              <p>
                <h5> "Tracking Equality at Work" is an evidential base for monitoring fairness at work. </h5>
              <p className="intro-sub-lead">
                Indicators are grouped under four issues and show the outcomes for different population
                groups over time. These indicators provide information about how close or how far from
                equality each population group is.
              </p>
            </Col>
          </Row>
          <Row className="container">
            <Col md={12}>
              <h4 className="intro-serif intro-explore">Explore equality at work issues</h4>
            </Col>
          </Row>
        </Grid>
        <div className="intro-issue-select">
          <div className="container">
            <Row>
              <Col md={12}>
                {IssueSelectView}
              </Col>
            </Row>
          </div>
        </div>
        <div className="intro-read-more">
          <p>or <a href="#/about">read more</a> about the background of this tool</p>
        </div>
      </div>
    )
  },

  handleIssueClick: function (issueSlug) {
    var flux = this.getFlux()

    return function (e) {
      e.preventDefault()
      flux.actions.issue.select(issueSlug)
    }
  }
})
