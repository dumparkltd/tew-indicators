var React         = require('react')
var Fluxxor       = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

var Load            = require('components/load')


//helpers
var _         = require('lodash')

var Grid 				= require('react-bootstrap/lib/Grid')
var Row 				= require('react-bootstrap/lib/Row')
var Col 				= require('react-bootstrap/lib/Col')

var log       = require('debug')('src:components:intro')

module.exports = React.createClass({

  propTypes: {
    flux: React.PropTypes.object,
  },

  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('issues','indicators')
  ],

  getStateFromFlux: function () {
    var flux = this.props.flux
    return {
      issuesLoading: flux.store('issues').isLoading(),
      indicatorsLoading: flux.store('indicators').isLoading()
    }
  },

  render: function () {

    log('props, state', this.props, this.state)
    var flux = this.getFlux()
    var IssueSelectView
    var items

    if (this.state.issuesLoading) {
      IssueSelectView = <Load/>
    }
    else {
      items = _.map(flux.stores.issues.data,function(item){
        return _.assign({},item,{
          subtitle : (this.state.indicatorsLoading) ? '' : flux.stores.indicators.query({ issue: item.id }).length + ' Indicators'
        })
      }, this)

      IssueSelectView = ([
      <Grid className="intro-explore-hint">
        <h4 className="serif intro-explore">Explore indicators by issue</h4>
      </Grid>,
      <div className="intro-issue-select nav-primary">
        <Grid>
          <ul className="list-inline nav-primary-list intro-ul">
            {
              _.map(items, function (item, i, items) {
                var width = 1/items.length * 100 + '%'
                var className = 'nav-primary-li intro-li'
                return (
                  <li className={className}  style={{width:width}}>
                    <a
                      className='btn'
                      href='#'
                      onClick={this.handleIssueClick(item.slug)}>
                      <span className={'icon-'+ item.slug}></span>
                      <div className='title'>{item.title}</div>
                      <div>{item.subtitle}</div>
                    </a>
                  </li>
                )
              },this)
            }
          </ul>
        </Grid>
      </div>,
      <Grid>
        <div className="intro-read-more">
          <p>or learn more about this tool <a href="#/about">here</a></p>
        </div>
      </Grid>]
      )
    }

    return (
      <div className='intro text-center'>
        <Grid>
          <Row className="intro-content">
            <Col md={10} xs={10} mdPush={1} xsPush={1}>
              <h1 className='serif'> Tracking Equality at Work
                is an evidential base for monitoring
                fairness at work
              </h1>
              <p>
                It is a human right to be treated fairly at every point of the employment process
                whether it is getting a job, fair pay, or promotion pathways. Like schools, homes and the
                community, workplaces are environments in which human rights must live.
              </p>
              <p>
                Indicators are grouped under four issues and show the outcomes for different population
                groups over time. These indicators provide information about how close or how far from
                equality each population group is.
              </p>
              <p>
                Download our report <a href="https://www.hrc.co.nz/files/2115/3013/8951/Tracking_Equality_Report_FINAL.pdf" target="_blank">here</a> containing Summary and Recommendations for Tracking Equality at Workâ€™s 2018 update.
              </p>
            </Col>
          </Row>
        </Grid>
        {IssueSelectView}
      </div>
    )
  },

  handleIssueClick: function (issueSlug) {
    var flux = this.getFlux()

    return function (e) {
      e.preventDefault()
      flux.actions.issue.select(issueSlug)
    }
  }
})
