var log       = require('debug')('actions:index')
var isArray   = require('isarray')
var qs        = require('qs')
var log       = require('debug')('actions')

var c = {

  ROUTE: {
    TRANSITION: "ROUTE:TRANSITION",
    GROUP: {
      SELECT: "ROUTE:GROUP:SELECT"
    },
    QUERY: {
      FIELD_REPLACE: "ROUTE:QUERY:FIELD_REPLACE",
      REPLACE: "ROUTE:QUERY:REPLACE",
      UPDATE: "ROUTE:QUERY:UPDATE",
      TOGGLE: "ROUTE:QUERY:TOGGLE",
      DIMENSION_UPDATE: "ROUTE:QUERY:DIMENSION_UPDATE"
    },
    PATH: {
      UPDATE: "ROUTE:PATH:UPDATE"
    },
    PARAMS: {
      UPDATE: "ROUTE:PARAMS:UPDATE"
    }
  },
  LINECHART : {
    HIGHLIGHTGROUP : "LINECHART:HIGHLIGHTGROUP",
    UNHIGHLIGHTGROUP : "LINECHART:UNHIGHLIGHTGROUP"
  },
  GROUP: {
    SELECT: "GROUP:SELECT"
  }

};

var methods = {
  navPage: function (page){
    log('navPage', page)
    if (page === 'home') {
      this.dispatch(c.ROUTE.TRANSITION, { route: '/' })
    } else {
      // TODO navigate to about and share pages
      this.dispatch(c.ROUTE.TRANSITION, { route: '/' + page })
    }

  },
  issue: {
    select : function (issueSlug) {
      this.dispatch(c.ROUTE.TRANSITION, { route: 'issue', params: { issueSlug: issueSlug } });
    }
  },
  indicator: {
    select : function (indicatorSlug) {
      this.dispatch(c.ROUTE.TRANSITION, { route: 'indicator', params: { indicatorSlug:indicatorSlug }});
    },
    toggleFilter: function (field, value) {
      log('toggleFilter', field, value)
      this.dispatch(c.ROUTE.QUERY.TOGGLE, { field: field, value: value })
    },
    selectFilter: function (field, value) {
      log('selectFilter', field, value)
      this.dispatch(c.ROUTE.QUERY.FIELD_REPLACE, { field: field, value: value })
    },
    selectDimension: function (dimension, value) {
      log('selectDimension', dimension, value)
      this.dispatch(c.ROUTE.QUERY.DIMENSION_UPDATE, { field: dimension, value: value })
    },
    sortBy: function (value) {
      this.dispatch(c.ROUTE.QUERY.FIELD_REPLACE, { field: 'sortBy', value: value })
    },
    lineChart : {
      highlightGroup : function(group){
        this.dispatch(c.LINECHART.HIGHLIGHTGROUP, { group: group })
      },
      unHighlightGroup : function(group){
        this.dispatch(c.LINECHART.UNHIGHLIGHTGROUP, { group: group })
      }
    }
    
  },
  routes: {
    transition: function (path, params, query) {
      this.dispatch(c.ROUTE.TRANSITION, { path: path, params: params, query: query });
    },

    pop: function (queryString) {
      log('pop', queryString)
      var query = qs.parse(queryString)
      log('query', query)
      this.dispatch(c.ROUTE.QUERY.REPLACE, { query: query })
    }

  },

  

  group: {
    //DEPRECATED
    selectChange: function (groupType, selectedValues, currentQuery) {
      if (!isArray(selectedValues)) throw new Error('selectedValues must be an array')
      //NOTE: rm currentQuery from here. Abstract to
      var query = clone(currentQuery)
      log('query', query)
      log('selectedValues', selectedValues)
      log('groupType', groupType)

      query[groupType] = selectedValues.join(',')
      //NOTE should be groupType update -> routestore knows 'the query'
      this.dispatch(c.ROUTE.TRANSITION, { query: query })
    },

    update: function (groupType, values) {
      if (!isArray(values)) throw new Error('values must be an array')
      this.dispatch(c.ROUTE.QUERY.UPDATE, { field: groupType, values: values })
    }



  }
};

module.exports = {
  methods: methods,
  constants: c
};
